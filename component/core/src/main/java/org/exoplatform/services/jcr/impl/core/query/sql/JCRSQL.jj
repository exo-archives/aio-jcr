/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. C:\Projects\v2.x\exo-cms\services\jcr\impl\target\generated-src\main\java\org\exoplatform\services\jcr\impl\core\query\sql\JCRSQL.jj */
/*@egen*/options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 5;
  OTHER_AMBIGUITY_CHECK = 2;
  STATIC = false;
  //DEBUG_PARSER = true;
  //DEBUG_LOOKAHEAD = false;
  //DEBUG_TOKEN_MANAGER = true;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = true;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = true;                                                                                                            
}

PARSER_BEGIN(JCRSQLParser)
/*
 * Copyright 2004-2005 The Apache Software Foundation or its licensors,
 *                     as applicable.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.exoplatform.services.jcr.impl.core.query.sql;
/*
import org.apache.jackrabbit.name.IllegalNameException;
import org.apache.jackrabbit.name.NamespaceResolver;
import org.apache.jackrabbit.name.QName;
import org.apache.jackrabbit.name.UnknownPrefixException;
import org.apache.jackrabbit.core.query.QueryConstants;
*/
import org.exoplatform.services.jcr.datamodel.IllegalNameException;
import org.exoplatform.services.jcr.impl.core.LocationFactory;
import org.exoplatform.services.jcr.datamodel.InternalQName;
//import org.apache.jackrabbit.name.UnknownPrefixException;
import org.exoplatform.services.jcr.impl.core.query.QueryConstants;
import javax.jcr.RepositoryException;

public class JCRSQLParser/*@bgen(jjtree)*/implements JCRSQLParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTJCRSQLParserState jjtree = new JJTJCRSQLParserState();

/*@egen*/

  private String statement;

  //private NamespaceAccessor resolver;

  private LocationFactory locationFactory;

  public static void main(String args[]) throws ParseException {
  	JCRSQLParser parser = new JCRSQLParser(System.in);
  	parser.Query().dump("");
  }

  public static ASTQuery parse(String statement, LocationFactory locationFactory) throws ParseException {
  	java.io.StringReader sReader = new java.io.StringReader(statement);
  	JCRSQLParser parser = new JCRSQLParser(sReader);
  	parser.setLocationfactory(locationFactory);
  	return parser.Query();
  }

  void setLocationfactory(LocationFactory locationFactory) {
        this.locationFactory = locationFactory;
  }

//  void setNamespaceResolver(NamespaceResolver resolver) {
//        this.resolver = resolver;
//  }

}

PARSER_END(JCRSQLParser)

SKIP :
{
  " "
| "\r"
| "\n"
| "\t"
| < COMMENT: <COMMENT_INTRO> (<COMMENT_CHAR>)* "\n" >
| < #COMMENT_CHAR: <NON_QUOTE_CHAR> | <QUOTE> >
| < #NON_QUOTE_CHAR: ~["'"] > // syntax rules
| < #COMMENT_INTRO: <MINUS_SIGN> <MINUS_SIGN> (<MINUS_SIGN>)* >
}

// KEY WORDS
TOKEN [ IGNORE_CASE ] :
{
  < BY: "BY" >
| < IN: "IN" >
| < OR: "OR" >
| < IS: "IS" >
| < AND: "AND" >
| < ASC: "ASC" >
| < NOT: "NOT" >
| < DESC: "DESC" >
| < LIKE: "LIKE" >
| < NULL: "NULL" >
| < FROM: "FROM" >
| < ORDER: "ORDER" >
| < WHERE: "WHERE" >
| < ESCAPE: "ESCAPE" >
| < SELECT: "SELECT" >
| < BETWEEN: "BETWEEN" >
| < CONTAINS: "CONTAINS" >
}



TOKEN:
{
  < #SIMPLE_LATIN_LETTER: <SIMPLE_LATIN_UPPER_CASE_LETTER> | <SIMPLE_LATIN_LOWER_CASE_LETTER> >
| < #SIMPLE_LATIN_UPPER_CASE_LETTER: (["A"-"Z"]) >
| < #SIMPLE_LATIN_LOWER_CASE_LETTER: (["a"-"z"]) >

| < #LETTER: <BASE_CHAR> | <IDEOGRAPHIC> >

| < #BASE_CHAR:
          ["A"-"Z"] | ["a"-"z"] | ["\u00c0"-"\u00d6"] | ["\u00d8"-"\u00f6"]
        | ["\u00f8"-"\u00ff"] | ["\u0100"-"\u0131"] | ["\u0134"-"\u013e"] | ["\u0141"-"\u0148"]
        | ["\u014a"-"\u017e"] | ["\u0180"-"\u01c3"] | ["\u01cd"-"\u01f0"] | ["\u01f4"-"\u01f5"]
        | ["\u01fa"-"\u0217"] | ["\u0250"-"\u02a8"] | ["\u02bb"-"\u02c1"] | "\u0386" | ["\u0388"-"\u038a"]
        | "\u038c" | ["\u038e"-"\u03a1"] | ["\u03a3"-"\u03ce"] | ["\u03d0"-"\u03d6"] | "\u03da"
        | "\u03dc" | "\u03de" | "\u03e0" | ["\u03e2"-"\u03f3"] | ["\u0401"-"\u040c"] | ["\u040e"-"\u044f"]
        | ["\u0451"-"\u045c"] | ["\u045e"-"\u0481"] | ["\u0490"-"\u04c4"] | ["\u04c7"-"\u04c8"]
        | ["\u04cb"-"\u04cc"] | ["\u04d0"-"\u04eb"] | ["\u04ee"-"\u04f5"] | ["\u04f8"-"\u04f9"]
        | ["\u0531"-"\u0556"] | "\u0559" | ["\u0561"-"\u0586"] | ["\u05d0"-"\u05ea"] | ["\u05f0"-"\u05f2"]
        | ["\u0621"-"\u063a"] | ["\u0641"-"\u064a"] | ["\u0671"-"\u06b7"] | ["\u06ba"-"\u06be"]
        | ["\u06c0"-"\u06ce"] | ["\u06d0"-"\u06d3"] | "\u06d5" | ["\u06e5"-"\u06e6"] | ["\u0905"-"\u0939"]
        | "\u093d" | ["\u0958"-"\u0961"] | ["\u0985"-"\u098c"] | ["\u098f"-"\u0990"] | ["\u0993"-"\u09a8"]
        | ["\u09aa"-"\u09b0"] | "\u09b2" | ["\u09b6"-"\u09b9"] | ["\u09dc"-"\u09dd"] | ["\u09df"-"\u09e1"]
        | ["\u09f0"-"\u09f1"] | ["\u0a05"-"\u0a0a"] | ["\u0a0f"-"\u0a10"] | ["\u0a13"-"\u0a28"]
        | ["\u0a2a"-"\u0a30"] | ["\u0a32"-"\u0a33"] | ["\u0a35"-"\u0a36"] | ["\u0a38"-"\u0a39"]
        | ["\u0a59"-"\u0a5c"] | "\u0a5e" | ["\u0a72"-"\u0a74"] | ["\u0a85"-"\u0a8b"] | "\u0a8d"
        | ["\u0a8f"-"\u0a91"] | ["\u0a93"-"\u0aa8"] | ["\u0aaa"-"\u0ab0"] | ["\u0ab2"-"\u0ab3"]
        | ["\u0ab5"-"\u0ab9"] | "\u0abd" | "\u0ae0" | ["\u0b05"-"\u0b0c"] | ["\u0b0f"-"\u0b10"]
        | ["\u0b13"-"\u0b28"] | ["\u0b2a"-"\u0b30"] | ["\u0b32"-"\u0b33"] | ["\u0b36"-"\u0b39"]
        | "\u0b3d" | ["\u0b5c"-"\u0b5d"] | ["\u0b5f"-"\u0b61"] | ["\u0b85"-"\u0b8a"]
        | ["\u0b8e"-"\u0b90"] | ["\u0b92"-"\u0b95"] | ["\u0b99"-"\u0b9a"] | "\u0b9c" | ["\u0b9e"-"\u0b9f"]
        | ["\u0ba3"-"\u0ba4"] | ["\u0ba8"-"\u0baa"] | ["\u0bae"-"\u0bb5"] | ["\u0bb7"-"\u0bb9"]
        | ["\u0c05"-"\u0c0c"] | ["\u0c0e"-"\u0c10"] | ["\u0c12"-"\u0c28"] | ["\u0c2a"-"\u0c33"]
        | ["\u0c35"-"\u0c39"] | ["\u0c60"-"\u0c61"] | ["\u0c85"-"\u0c8c"] | ["\u0c8e"-"\u0c90"]
        | ["\u0c92"-"\u0ca8"] | ["\u0caa"-"\u0cb3"] | ["\u0cb5"-"\u0cb9"] | "\u0cde" | ["\u0ce0"-"\u0ce1"]
        | ["\u0d05"-"\u0d0c"] | ["\u0d0e"-"\u0d10"] | ["\u0d12"-"\u0d28"] | ["\u0d2a"-"\u0d39"]
        | ["\u0d60"-"\u0d61"] | ["\u0e01"-"\u0e2e"] | "\u0e30" | ["\u0e32"-"\u0e33"] | ["\u0e40"-"\u0e45"]
        | ["\u0e81"-"\u0e82"] | "\u0e84" | ["\u0e87"-"\u0e88"] | "\u0e8a" | "\u0e8d" | ["\u0e94"-"\u0e97"]
        | ["\u0e99"-"\u0e9f"] | ["\u0ea1"-"\u0ea3"] | "\u0ea5" | "\u0ea7" | ["\u0eaa"-"\u0eab"]
        | ["\u0ead"-"\u0eae"] | "\u0eb0" | ["\u0eb2"-"\u0eb3"] | "\u0ebd" | ["\u0ec0"-"\u0ec4"]
        | ["\u0f40"-"\u0f47"] | ["\u0f49"-"\u0f69"] | ["\u10a0"-"\u10c5"] | ["\u10d0"-"\u10f6"] | "\u1100"
        | ["\u1102"-"\u1103"] | ["\u1105"-"\u1107"] | "\u1109" | ["\u110b"-"\u110c"] | ["\u110e"-"\u1112"]
        | "\u113c" | "\u113e" | "\u1140" | "\u114c" | "\u114e" | "\u1150" | ["\u1154"-"\u1155"] | "\u1159"
        | ["\u115f"-"\u1161"] | "\u1163" | "\u1165" | "\u1167" | "\u1169" | ["\u116d"-"\u116e"]
        | ["\u1172"-"\u1173"] | "\u1175" | "\u119e" | "\u11a8" | "\u11ab" | ["\u11ae"-"\u11af"]
        | ["\u11b7"-"\u11b8"] | "\u11ba" | ["\u11bc"-"\u11c2"] | "\u11eb" | "\u11f0" | "\u11f9"
        | ["\u1e00"-"\u1e9b"] | ["\u1ea0"-"\u1ef9"] | ["\u1f00"-"\u1f15"] | ["\u1f18"-"\u1f1d"]
        | ["\u1f20"-"\u1f45"] | ["\u1f48"-"\u1f4d"] | ["\u1f50"-"\u1f57"] | "\u1f59" | "\u1f5b" | "\u1f5d"
        | ["\u1f5f"-"\u1f7d"] | ["\u1f80"-"\u1fb4"] | ["\u1fb6"-"\u1fbc"] | "\u1fbe" | ["\u1fc2"-"\u1fc4"]
        | ["\u1fc6"-"\u1fcc"] | ["\u1fd0"-"\u1fd3"] | ["\u1fd6"-"\u1fdb"] | ["\u1fe0"-"\u1fec"]
        | ["\u1ff2"-"\u1ff4"] | ["\u1ff6"-"\u1ffc"] | "\u2126" | ["\u212a"-"\u212b"] | "\u212e"
        | ["\u2180"-"\u2182"] | ["\u3041"-"\u3094"] | ["\u30a1"-"\u30fa"] | ["\u3105"-"\u312c"]
        | ["\uac00"-"\ud7a3"] >
| < #IDEOGRAPHIC :
          ["\u4e00"-"\u9fa5"] | "\u3007" | ["\u3021"-"\u3029"] >

| < #DIGIT: (["0"-"9"]) >


| < DOUBLE_QUOTE: "\"" >
| < PERCENT: "%" >
| < AMPERSAND: "&" >
| < QUOTE: "'" >
| < LEFT_PAREN: "(" >
| < RIGHT_PAREN: ")" >
| < ASTERISK: "*" >
| < PLUS_SIGN: "+" >
| < COMMA: "," >
| < MINUS_SIGN: "-" >
| < PERIOD: "." >
| < SOLIDUS: "/" >
| < COLON: ":" >
| < SEMICOLON: ";" >
| < LT_OPERATOR: "<" >
| < EQ_OPERATOR: "=" >
| < GT_OPERATOR: ">" >
| < QUESTION_MARK: "?" >
| < UNDERSCORE: "_" >
| < VERTICAL_BAR: "|" >

| < LEFT_BRACKET: "[" >  // also special char?
| < RIGHT_BRACKET: "]" > // also special char?


| < REGULAR_IDENTIFIER: <IDENTIFIER_BODY> >
| < #IDENTIFIER_BODY: <IDENTIFIER_START> (<UNDERSCORE> | <COLON> | <IDENTIFIER_PART>)* >
| < #IDENTIFIER_START: <LETTER> > // syntax rules 5.2
| < #IDENTIFIER_PART: <IDENTIFIER_START> | <DIGIT> >

| < DELIMITED_IDENTIFIER: <DOUBLE_QUOTE> <DELIMITED_IDENTIFIER_BODY> <DOUBLE_QUOTE> >
| < #DELIMITED_IDENTIFIER_BODY: (<DELIMITED_IDENTIFIER_PART>)+ >
| < #DELIMITED_IDENTIFIER_PART: <NON_DOUBLE_QUOTE_CHAR> | <DOUBLE_QUOTE_SYMBOL> >
| < #NON_DOUBLE_QUOTE_CHAR: ~["\""] > // syntax rules 5.2
| < #DOUBLE_QUOTE_SYMBOL: <DOUBLE_QUOTE><DOUBLE_QUOTE> >

| < NE_OPERATOR: "<>" >
| < GE_OPERATOR: ">=" >
| < LE_OPERATOR: "<=" >
| < CONCAT_OPERATOR: "||" >
| < DOUBLE_PERIOD: ".." >

/*
| < COMMENT: <COMMENT_INTRO> (<COMMENT_CHAR>)* "\n" >
| < #COMMENT_CHAR: <NON_QUOTE_CHAR> | <QUOTE> >
| < #NON_QUOTE_CHAR: ~["'"] > // syntax rules
| < #COMMENT_INTRO: <MINUS_SIGN> <MINUS_SIGN> (<MINUS_SIGN>)* >
*/

/* Literals */

| < EXACT_NUMERIC_LITERAL: (<SIGN>)? (<UNSIGNED_INTEGER> (<PERIOD> (<UNSIGNED_INTEGER>)?)?) | (<PERIOD> <UNSIGNED_INTEGER>) >
| < #SIGN: <PLUS_SIGN> | <MINUS_SIGN> >
| < APPROXIMATE_NUMERIC_LITERAL: <MANTISSA> ("E" | "e") <EXPONENT> >
| < #MANTISSA: <EXACT_NUMERIC_LITERAL> >
| < #EXPONENT: <SIGNED_INTEGER> >
| < #SIGNED_INTEGER: (<SIGN>)? <UNSIGNED_INTEGER> >
| < #UNSIGNED_INTEGER: (<DIGIT>)+ >
| < DATETIME_LITERAL: <DATE_LITERAL> | /* <TIME_LITERAL> | */ <TIMESTAMP_LITERAL> >
| < DATE_LITERAL: "DATE" (" ")+ <DATE_STRING> >
//| < TIME_LITERAL: "TIME" (" ")+ <TIME_STRING> >  // not supported in jcr
| < TIMESTAMP_LITERAL: "TIMESTAMP" (" ")+ <TIMESTAMP_STRING> >
| < #DATE_STRING: <QUOTE> <DATE_VALUE> <QUOTE> >
// | < #TIME_STRING: <QUOTE> <TIME_VALUE> (<TIME_ZONE_INTERVAL>)? <QUOTE> > // not supported in jcr
| < #TIMESTAMP_STRING: <QUOTE> <DATE_VALUE> (" "|"T") <TIME_VALUE> (<TIME_ZONE_INTERVAL>)? <QUOTE> >
| < #TIME_ZONE_INTERVAL: "Z" | (<SIGN> <HOURS_VALUE> <COLON> <MINUTES_VALUE>) >
| < #DATE_VALUE: <YEARS_VALUE> <MINUS_SIGN> <MONTHS_VALUE> <MINUS_SIGN> <DAYS_VALUE> >
| < #TIME_VALUE: <HOURS_VALUE> <COLON> <MINUTES_VALUE> <COLON> <SECONDS_VALUE> >
| < #YEARS_VALUE: <DATETIME_VALUE> >
| < #MONTHS_VALUE: <DATETIME_VALUE> >
| < #DAYS_VALUE: <DATETIME_VALUE> >
| < #HOURS_VALUE: <DATETIME_VALUE> >
| < #MINUTES_VALUE: <DATETIME_VALUE> >
| < #SECONDS_VALUE: <SECONDS_INTEGER_VALUE> (<PERIOD> (<SECONDS_FRACTION>)?)? >
| < #SECONDS_INTEGER_VALUE: <UNSIGNED_INTEGER> >
| < #SECONDS_FRACTION: <UNSIGNED_INTEGER> >
| < #DATETIME_VALUE: <UNSIGNED_INTEGER> >

| < CHAR_STRING_LITERAL: <QUOTE> (<CHAR_REPRESENTATION>)* <QUOTE> >
| < #CHAR_REPRESENTATION: <NON_QUOTE_CHAR> | (<QUOTE_SYMBOL>) >
| < #QUOTE_SYMBOL: <QUOTE><QUOTE> >
}




// QUERY EXPRESSIONS, 7

ASTQuery Query() :
{/*@bgen(jjtree) Query */
  ASTQuery jjtn000 = new ASTQuery(JJTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Query */
  try {
/*@egen*/
  <SELECT>
  SelectList()
  TableExpression()
  [ OrderByClause() ]
  <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SelectList() :
{/*@bgen(jjtree) SelectList */
  ASTSelectList jjtn000 = new ASTSelectList(JJTSELECTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SelectList */
    try {
/*@egen*/
    (<ASTERISK>)
  | (Identifier() (<PERIOD> Identifier() { Node n = jjtree.popNode(); jjtree.popNode(); jjtree.pushNode(n); } )? (<COMMA> Identifier() (<PERIOD> Identifier() { Node n = jjtree.popNode(); jjtree.popNode(); jjtree.pushNode(n); } )? )*)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TableExpression()       :
{}
{
  FromClause()
  [ WhereClause() ]
}

void FromClause() :
{/*@bgen(jjtree) FromClause */
  ASTFromClause jjtn000 = new ASTFromClause(JJTFROMCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FromClause */
  try {
/*@egen*/
  <FROM> Identifier() (<COMMA> Identifier())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void WhereClause() :
{/*@bgen(jjtree) WhereClause */
  ASTWhereClause jjtn000 = new ASTWhereClause(JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhereClause */
  try {
/*@egen*/
  <WHERE> SearchCondition()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

// PREDICATES 8.1
void Predicate() :
{/*@bgen(jjtree) Predicate */
  ASTPredicate jjtn000 = new ASTPredicate(JJTPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int operationType;
  InternalQName identifier;
  String value;
  String escapeString;
}
{/*@bgen(jjtree) Predicate */
  try {
/*@egen*/
  (
    (
      identifier = Identifier() { jjtn000.setIdentifier(identifier); } ( <PERIOD> identifier = Identifier() { Node n = jjtree.popNode(); jjtree.popNode(); jjtree.pushNode(n); jjtn000.setIdentifier(identifier); } )?
      (
        (
          operationType = ComparisonOperation() { jjtn000.setOperationType(operationType); }
          (Literal() | (identifier = Identifier() { jjtn000.setIdentifier(identifier); } ( <PERIOD> identifier = Identifier() { Node n = jjtree.popNode(); jjtree.popNode(); jjtree.pushNode(n); jjtn000.setIdentifier(identifier); } )? ) )
        )
      |
        ((<NOT> { jjtn000.setNegate(true); })?
          (
            (<BETWEEN> { jjtn000.setOperationType(QueryConstants.OPERATION_BETWEEN); } Literal() <AND> Literal())
          |
            (
              <LIKE> { jjtn000.setOperationType(QueryConstants.OPERATION_LIKE); } value = CharStringLiteral()
              {
                ASTLiteral s = new ASTLiteral(JJTLITERAL);
                s.setType(QueryConstants.TYPE_STRING);
                s.setValue(value);
                jjtree.pushNode(s);
              }
              (<ESCAPE> escapeString = CharStringLiteral() { jjtn000.setEscapeString(escapeString); })?
            )
          )
        )
      |
        (<IS> (<NOT> { jjtn000.setNegate(true); })? <NULL>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
          {
            jjtn000.setOperationType(jjtn000.isNegate() ? QueryConstants.OPERATION_NOT_NULL : QueryConstants.OPERATION_NULL);
          }
        )
      )
    )
  |
    (
      Literal() (<NOT> { jjtn000.setNegate(true); })? <IN>
      (
        identifier = Identifier()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        {
          jjtn000.setIdentifier(identifier);
          jjtn000.setOperationType(jjtn000.isNegate() ? QueryConstants.OPERATION_NE_GENERAL : QueryConstants.OPERATION_EQ_GENERAL);
        }
      )
    )
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


int ComparisonOperation()       :
{
  int operationType;
}
{
  (
      <EQ_OPERATOR> { operationType = QueryConstants.OPERATION_EQ_GENERAL; }
    | <NE_OPERATOR> { operationType = QueryConstants.OPERATION_NE_GENERAL; }
    | <LT_OPERATOR> { operationType = QueryConstants.OPERATION_LT_GENERAL; }
    | <GT_OPERATOR> { operationType = QueryConstants.OPERATION_GT_GENERAL; }
    | <LE_OPERATOR> { operationType = QueryConstants.OPERATION_LE_GENERAL; }
    | <GE_OPERATOR> { operationType = QueryConstants.OPERATION_GE_GENERAL; }
  )
  {
    return operationType;
  }
}


// SEARCH CONDITION 8.12
void SearchCondition()       :
{}
{
  OrExpression()
}

void OrExpression()       :
{}
{/*@bgen(jjtree) #OrExpression(> 1) */
  {
    ASTOrExpression jjtn001 = new ASTOrExpression(JJTOREXPRESSION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    AndExpression() (<OR> AndExpression())*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void AndExpression()       :
{}
{/*@bgen(jjtree) #AndExpression(> 1) */
  {
    ASTAndExpression jjtn001 = new ASTAndExpression(JJTANDEXPRESSION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    UnaryExpression() (<AND> UnaryExpression())*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void UnaryExpression()       :
{}
{/*@bgen(jjtree) #NotExpression(true) */
  {
    ASTNotExpression jjtn001 = new ASTNotExpression(JJTNOTEXPRESSION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    <NOT> UnaryExpression()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
|
  (
    PrimaryExpression()
  )
}

void PrimaryExpression()       :
{}
{
  (
    Predicate()
  )
|
  (
    BracketExpression()
  )
|
  (
    ContainsExpression()
  )
}

void BracketExpression() :
{/*@bgen(jjtree) BracketExpression */
  ASTBracketExpression jjtn000 = new ASTBracketExpression(JJTBRACKETEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BracketExpression */
  try {
/*@egen*/
  <LEFT_PAREN> SearchCondition() <RIGHT_PAREN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ContainsExpression() :
{/*@bgen(jjtree) ContainsExpression */
  ASTContainsExpression jjtn000 = new ASTContainsExpression(JJTCONTAINSEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
  InternalQName name = null;
}
{/*@bgen(jjtree) ContainsExpression */
  try {
/*@egen*/
  <CONTAINS>
  <LEFT_PAREN>
  ( <ASTERISK> | (name = Identifier() { jjtn000.setPropertyName(name); }) ) ","
  t = <CHAR_STRING_LITERAL> { jjtn000.setQuery(t.image.substring(1, t.image.length() - 1).replaceAll("''", "'")); }
  <RIGHT_PAREN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Literal() :
{/*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
  String value;
}
{/*@bgen(jjtree) Literal */
  try {
/*@egen*/
  (
    t = <APPROXIMATE_NUMERIC_LITERAL>/*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/ { jjtn000.setType(QueryConstants.TYPE_DOUBLE); jjtn000.setValue(t.image); }
  |
    // can contain a dot -> use double
    t = <EXACT_NUMERIC_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      if (t.image.indexOf('.') > -1) {
        jjtn000.setType(QueryConstants.TYPE_DOUBLE);
      } else {
        jjtn000.setType(QueryConstants.TYPE_LONG);
      }
      jjtn000.setValue(t.image);
    }
  |
    value = CharStringLiteral()/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ { jjtn000.setType(QueryConstants.TYPE_STRING); jjtn000.setValue(value); }
  |
    t = <DATETIME_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      if (t.image.startsWith("TIMESTAMP")) {
        jjtn000.setValue(t.image.substring(t.image.indexOf('\'') + 1, t.image.length() - 1));
        jjtn000.setType(QueryConstants.TYPE_TIMESTAMP);
      /*
      } else if (t.image.startsWith("TIME")) {
        jjtThis.setValue(t.image.substring(t.image.indexOf('\'') + 1, t.image.length() - 1));
        jjtThis.setType(QueryConstants.TYPE_TIME);
      */
      } else {
        jjtn000.setValue(t.image.substring(t.image.indexOf('\'') + 1, t.image.length() - 1));
        jjtn000.setType(QueryConstants.TYPE_DATE);
      }
    }
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String CharStringLiteral()       :
{
  Token t;
  String value = "";
}
{
  (
    t = <CHAR_STRING_LITERAL> { value += t.image.substring(1, t.image.length() - 1); } ( t = <CHAR_STRING_LITERAL> { value += t.image.substring(1, t.image.length() - 1); } )*
  )
  {
    // strip any quote escapes
    return value.replaceAll("''", "'");
  }
}

InternalQName Identifier() :
{/*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
  InternalQName name = null;
}
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  (
    t = <REGULAR_IDENTIFIER>
      {
        try {
          InternalQName internalQName = locationFactory.parseJCRName(t.image).getInternalName();
          jjtn000.setName(internalQName);
//          jjtThis.setName(QName.fromJCRName(t.image, resolver));
        } catch (RepositoryException e) {
          throw new ParseException(e.getMessage());
        }  
      }
  |
    t = <DELIMITED_IDENTIFIER>
      {
        try {
          InternalQName internalQName = locationFactory.
            parseJCRName(t.image.substring(1, t.image.length()-1)).getInternalName();
          jjtn000.setName(internalQName);

//          jjtThis.setName(QName.fromJCRName(t.image.substring(1, t.image.length()-1), resolver));
        } catch (RepositoryException e) {
          throw new ParseException(e.getMessage());
        } 
      }
  |
    (
      (
        // or any keyword
          t = <BY>
        | t = <IN>
        | t = <OR>
        | t = <IS>
        | t = <AND>
        /*| <NOT>*/
        | t = <LIKE>
        | t = <NULL>
        | t = <FROM>
        | t = <ORDER>
        | t = <WHERE>
        | t = <SELECT>
        | t = <BETWEEN>
      )
      {
        try {
          InternalQName internalQName = locationFactory.parseJCRName(t.image).getInternalName();
          jjtn000.setName(internalQName);
//          jjtThis.setName(QName.fromJCRName(t.image, resolver));
        } catch (RepositoryException e) {
          throw new ParseException(e.getMessage());
        } 
      }
    )
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000.getName();
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void OrderByClause() :
{/*@bgen(jjtree) OrderByClause */
  ASTOrderByClause jjtn000 = new ASTOrderByClause(JJTORDERBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrderByClause */
  try {
/*@egen*/
  <ORDER> <BY> OrderSpec() (<COMMA> OrderSpec())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void OrderSpec() :
{/*@bgen(jjtree) OrderSpec */
  ASTOrderSpec jjtn000 = new ASTOrderSpec(JJTORDERSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrderSpec */
  try {
/*@egen*/
  Identifier() (AscendingOrderSpec() | DescendingOrderSpec())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AscendingOrderSpec() :
{/*@bgen(jjtree) AscendingOrderSpec */
  ASTAscendingOrderSpec jjtn000 = new ASTAscendingOrderSpec(JJTASCENDINGORDERSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AscendingOrderSpec */
  try {
/*@egen*/
  <ASC>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DescendingOrderSpec() :
{/*@bgen(jjtree) DescendingOrderSpec */
  ASTDescendingOrderSpec jjtn000 = new ASTDescendingOrderSpec(JJTDESCENDINGORDERSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DescendingOrderSpec */
  try {
/*@egen*/
  <DESC>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}