/*
 * Copyright (C) 2003-2007 eXo Platform SAS.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see<http://www.gnu.org/licenses/>.
 */

package org.exoplatform.services.jcr.ext.resource;

import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.ArrayList;
import java.util.Collection;

import javax.jcr.Node;
import javax.jcr.RepositoryException;
import javax.jcr.UnsupportedRepositoryOperationException;

import org.exoplatform.common.util.HierarchicalProperty;
import org.exoplatform.services.jcr.impl.Constants;

/**
 * Created by The eXo Platform SAS        .
 * @author Gennady Azarenkov
 * @version $Id: $
 */

public abstract class AbstractXMLViewNodeRepresentation implements NodeRepresentation {
  
  private Node node;
  protected boolean isSystem;

  protected AbstractXMLViewNodeRepresentation(Node node) {
    this.node = node;
  }

  public String getContentEncoding() {
    return Constants.DEFAULT_ENCODING;
  }

  public long getContentLenght() throws RepositoryException {
    return -1;
  }

  /*
   * (non-Javadoc)
   * 
   * @see org.exoplatform.services.jcr.ext.resource.NodeRepresentation#getMediaType()
   */
  public String getMediaType() throws RepositoryException {
    return "text/xml";
  }

  /*
   * (non-Javadoc)
   * 
   * @see org.exoplatform.services.jcr.ext.resource.NodeRepresentation#getLastModified()
   */
  public long getLastModified() throws RepositoryException {
    return 0;
  }

  /*
   * (non-Javadoc)
   * 
   * @see org.exoplatform.services.jcr.ext.resource.NodeRepresentation#getProperty(java.lang.String)
   */
  public HierarchicalProperty getProperty(String name)
      throws RepositoryException {
    return null;
  }

  /*
   * (non-Javadoc)
   * 
   * @see org.exoplatform.services.jcr.ext.resource.NodeRepresentation#getProperty(java.lang.String)
   */
  public Collection <HierarchicalProperty> getProperties(String name)
      throws RepositoryException {
    return null;
  }
  
  /*
   * (non-Javadoc)
   * 
   * @see org.exoplatform.services.jcr.ext.resource.NodeRepresentation#getPropertyNames()
   */
  public Collection<String> getPropertyNames() throws RepositoryException {
    return new ArrayList<String>();
  }

  /* (non-Javadoc)
   * @see org.exoplatform.services.jcr.ext.resource.NodeRepresentation#getInputStream()
   */
  public InputStream getInputStream() throws IOException, RepositoryException {
    final PipedInputStream pin = new PipedInputStream();
    final PipedOutputStream pout = new PipedOutputStream(pin);

    try {

      new Thread() {

        /*
         * (non-Javadoc)
         * 
         * @see java.lang.Thread#run()
         */
        public void run() {
          try {
            if(isSystem)
              node.getSession().exportSystemView(node.getPath(), pout, false, false);
            else
              node.getSession().exportDocumentView(node.getPath(), pout, false,
                false);
          } catch (Exception e) {
            /*
             * Nothing to do. Can give exception if nothing read from stream,
             * this exception generated by
             * XMLStreamWriterImpl#writeStartDocument.
             */
          } finally {
            try {
              pout.flush();
              pout.close();
            } catch (Exception e) {
            }
          }
        }

      }.start();

      return pin;
    } catch (Exception e) {
      e.printStackTrace();
      throw new IOException("can't get input stream");
    }

  }

  /*
   * (non-Javadoc)
   * 
   * @see org.exoplatform.services.jcr.ext.resource.NodeRepresentation#getNode()
   */
  public Node getNode() {
    return node;
  }

  /* (non-Javadoc)
   * @see org.exoplatform.services.jcr.ext.resource.NodeRepresentation#addProperties(java.lang.String, java.util.Collection)
   */
  public void addProperties(
      Collection<HierarchicalProperty> properties)
      throws UnsupportedRepositoryOperationException {
    throw new UnsupportedRepositoryOperationException();
    
  }

  /* (non-Javadoc)
   * @see org.exoplatform.services.jcr.ext.resource.NodeRepresentation#addProperty(java.lang.String, org.exoplatform.common.util.HierarchicalProperty)
   */
  public void addProperty(HierarchicalProperty property)
      throws UnsupportedRepositoryOperationException {
    throw new UnsupportedRepositoryOperationException();
    
  }

  /* (non-Javadoc)
   * @see org.exoplatform.services.jcr.ext.resource.NodeRepresentation#removeProperty(java.lang.String)
   */
  public void removeProperty(String name)
      throws UnsupportedRepositoryOperationException {
    throw new UnsupportedRepositoryOperationException();
    
  }

}

