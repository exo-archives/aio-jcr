/* Generated By:JavaCC: Do not edit this line. DASLTag.java */
 package org.exoplatform.services.webdav.search.basicsearch.convertor;

 import java.util.Enumeration;
 import org.exoplatform.services.webdav.search.basicsearch.convertor.dasl.DASLDocument;

 public class DASLTag implements DASLTagConstants {
  public static void main(String args[]) throws ParseException
  {
    DASLTag parser = new DASLTag(System.in);
    DASLDocument doc = parser.DASLDocument();
    System.out.println("--------- Item names: ------------------");
    String node_name;
    for (Enumeration e = doc.getElements().elements(); e.hasMoreElements(); )
    {
     Object o = e.nextElement();
     System.out.print("Type: "+((DASLDocument.DASLElement)o).getType()+"\t");
     if(o instanceof DASLDocument.Text)
      System.out.print("Content: "+((DASLDocument.Text)o).getContent() );
     else if (!(o instanceof DASLDocument.NewLine))
      System.out.print("Name: "+((DASLDocument.DASLElement)o).getName() );
     System.out.println();
    }
    System.out.println("------------------------------------------");
  }

/**
 * -------------------- DASL GRAMMAR STARTS HERE -----------------------------
 */
  final public DASLDocument DASLDocument() throws ParseException {
  DASLDocument.ElementSequence s;
    s = ElementSequence();
    jj_consume_token(0);
     {if (true) return new DASLDocument(s);}
    throw new Error("Missing return statement in function");
  }

  final public DASLDocument.ElementSequence ElementSequence() throws ParseException {
  DASLDocument.ElementSequence s = new DASLDocument.ElementSequence();
  DASLDocument.DASLElement e;
    label_1:
    while (true) {
      switch (jj_nt.kind) {
      case EOL:
      case OPEN_TAG_BRACKET:
      case OPEN_XML_BRACKET:
      case OPEN_CLOSE_TAG_BRACKET:
      case PCDATA:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      e = Element();
     if (e != null) s.addElement(e);
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public DASLDocument.DASLElement Element() throws ParseException {
   DASLDocument.StartTag start_tag = null;
   DASLDocument.EndTag   end_tag   = null;
   DASLDocument.EmptyTag empty_tag = null;
   String start_xml_tag = null;
   Token t=null;
    if (jj_2_1(6)) {
      empty_tag = EmptyTag();
                                      {if (true) return empty_tag;}
    } else {
      switch (jj_nt.kind) {
      case OPEN_XML_BRACKET:
        start_xml_tag = TitleTag();
                                          {if (true) return null;}
        break;
      case OPEN_TAG_BRACKET:
        start_tag = StartTag();
                                      {if (true) return start_tag;}
        break;
      case OPEN_CLOSE_TAG_BRACKET:
        end_tag = EndTag();
                                      {if (true) return end_tag;}
        break;
      case PCDATA:
        t = jj_consume_token(PCDATA);
                              {if (true) return new DASLDocument.Text(t.toString());}
        break;
      case EOL:
        jj_consume_token(EOL);
                              {if (true) return new DASLDocument.NewLine();}
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public DASLDocument.Attribute Attribute() throws ParseException {
  DASLDocument.Attribute a;
  Token t1, t2=null;
    t1 = jj_consume_token(ATTR_NAME);
    jj_consume_token(ATTR_EQ);
    t2 = jj_consume_token(ATTR_VAL);
   {if (true) return new DASLDocument.Attribute(t1.toString(), t2.toString());}
    throw new Error("Missing return statement in function");
  }

  final public DASLDocument.AttributeList AttributeList() throws ParseException {
  DASLDocument.AttributeList alist = new DASLDocument.AttributeList();
  DASLDocument.Attribute a;
    label_2:
    while (true) {
      switch (jj_nt.kind) {
      case ATTR_NAME:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      a = Attribute();
                   alist.addAttribute(a);
    }
    {if (true) return alist;}
    throw new Error("Missing return statement in function");
  }

  final public DASLDocument.StartTag StartTag() throws ParseException {
  Token t;
  DASLDocument.AttributeList alist;
    jj_consume_token(OPEN_TAG_BRACKET);
    t = jj_consume_token(TAG_NAME);
    alist = AttributeList();
    jj_consume_token(CLOSE_TAG_BRACKET);
     {if (true) return new DASLDocument.StartTag(t.image, alist);}
    throw new Error("Missing return statement in function");
  }

  final public String TitleTag() throws ParseException {
    jj_consume_token(OPEN_XML_BRACKET);
    jj_consume_token(TAG_NAME);
    AttributeList();
    jj_consume_token(CLOSE_XML_BRACKET);
     {if (true) return new String();}
    throw new Error("Missing return statement in function");
  }

  final public DASLDocument.EndTag EndTag() throws ParseException {
  Token t;
    jj_consume_token(OPEN_CLOSE_TAG_BRACKET);
    t = jj_consume_token(TAG_NAME);
    jj_consume_token(CLOSE_TAG_BRACKET);
    {if (true) return new DASLDocument.EndTag(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public DASLDocument.EmptyTag EmptyTag() throws ParseException {
  Token t;
    jj_consume_token(OPEN_TAG_BRACKET);
    t = jj_consume_token(TAG_NAME);
    jj_consume_token(CLOSE_EMPTY_TAG_BRACKET);
      {if (true) return new DASLDocument.EmptyTag(t.image);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_3R_3() {
    if (jj_scan_token(OPEN_TAG_BRACKET)) return true;
    if (jj_scan_token(TAG_NAME)) return true;
    if (jj_scan_token(CLOSE_EMPTY_TAG_BRACKET)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_3()) return true;
    return false;
  }

  public DASLTagTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x7c00,0x7c00,0x40000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public DASLTag(java.io.InputStream stream) {
     this(stream, null);
  }
  public DASLTag(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DASLTagTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public DASLTag(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DASLTagTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public DASLTag(DASLTagTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(DASLTagTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[25];
    for (int i = 0; i < 25; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

 }
