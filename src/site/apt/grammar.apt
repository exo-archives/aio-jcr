JavaCC task for maven 2 plugin

  In order to modificate the XPATH or SQL grammar it is necessary to know the names of files which will be generated by a parser and the names of files created by developers.
  First of all, launch

  mvn clean

  in

  ${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl

  Than check if the next XML fragment exist in ${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/pom.xml :

---------
...
<plugin>
  <groupId>org.codehaus.mojo</groupId>
  <artifactId>javacc-maven-plugin</artifactId>
  <version>2.0</version>
  <executions>
    <execution>
      <phase>generate-sources</phase>
      <configuration>
        <!-- sourceDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/java/org/exoplatform/services/jcr/impl/core/query/xpath/</sourceDirectory -->
        <!-- <sourceDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/java/org/exoplatform/services/jcr/impl/core/query/sql/</sourceDirectory> -->
        <!-- <sourceDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/grammar/sql/</sourceDirectory> -->
        <!-- sourceDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/grammar/xpath/</sourceDirectory -->
        <!-- outputDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/java/org/exoplatform/services/jcr/impl/core/query/xpath/</outputDirectory -->
        <!-- <outputDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/java/org/exoplatform/services/jcr/impl/core/query/sql/</outputDirectory> -->
      </configuration>
      <goals>
        <!-- goal>javacc</goal -->
        <!-- goal>jjtree</goal -->
      </goals>
    </execution>
  </executions>
</plugin>
...
---------
  If this fragment not exist, insert it.

   <<Settings in pom.xml>>

  There are two goals javacc and jjtree which are necessary to generate *.java files for parsing SQL and XPATH queries in
  ${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/java/org/exoplatform/services/jcr/impl/core/query/xpath/
  ${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/java/org/exoplatform/services/jcr/impl/core/query/sql/
  directories.
  The javacc goal works only with .jj files and jjtree works only with .jjt files.
  In order to generate new files it's necessary to recomment tag pair (SQL or XPath) for the corresponding goal.
  Note that the javacc-maven-plugin cannot work with multiple goals. Therefore, do this operation one by one.

  For instance, change the pom by first configuration:

---------
...
<plugin>
  <groupId>org.codehaus.mojo</groupId>
  <artifactId>javacc-maven-plugin</artifactId>
  <version>2.0</version>
  <executions>
    <execution>
      <phase>generate-sources</phase>
      <configuration>
        <sourceDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/java/org/exoplatform/services/jcr/impl/core/query/xpath/</sourceDirectory>
        <!-- sourceDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/java/org/exoplatform/services/jcr/impl/core/query/sql/</sourceDirectory -->
        <!-- sourceDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/grammar/sql/</sourceDirectory -->
        <!-- sourceDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/grammar/xpath/</sourceDirectory -->
        <outputDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/java/org/exoplatform/services/jcr/impl/core/query/xpath/</outputDirectory>
        <!-- outputDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/java/org/exoplatform/services/jcr/impl/core/query/sql/</outputDirectory -->
      </configuration>
      <goals>
        <goal>javacc</goal>
        <!-- goal>jjtree</goal -->
      </goals>
    </execution>
  </executions>
</plugin>
...
---------

  Than, execute next command:

  mvn generate-sources

  This command will generate *.java files, related to the JAVACC parser and XPATH.

  Change the pom by second configuration:

---------
...
<plugin>
  <groupId>org.codehaus.mojo</groupId>
  <artifactId>javacc-maven-plugin</artifactId>
  <version>2.0</version>
  <executions>
    <execution>
      <phase>generate-sources</phase>
      <configuration>
        <!-- sourceDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/java/org/exoplatform/services/jcr/impl/core/query/xpath/</sourceDirectory -->
        <!-- sourceDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/java/org/exoplatform/services/jcr/impl/core/query/sql/</sourceDirectory -->
        <!-- sourceDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/grammar/sql/</sourceDirectory -->
        <sourceDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/grammar/xpath/</sourceDirectory>
        <outputDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/java/org/exoplatform/services/jcr/impl/core/query/xpath/</outputDirectory>
        <!-- outputDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/java/org/exoplatform/services/jcr/impl/core/query/sql/</outputDirectory -->
      </configuration>
      <goals>
        <!-- goal>javacc</goal -->
        <goal>jjtree</goal>
      </goals>
    </execution>
  </executions>
</plugin>
...
---------

  Than, execute next command:

  mvn generate-sources

  This command will generate *.java files, related to the JJTREE and XPATH.

  Change the pom by third configuration:

---------
...
<plugin>
  <groupId>org.codehaus.mojo</groupId>
  <artifactId>javacc-maven-plugin</artifactId>
  <version>2.0</version>
  <executions>
    <execution>
      <phase>generate-sources</phase>
      <configuration>
        <!-- sourceDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/java/org/exoplatform/services/jcr/impl/core/query/xpath/</sourceDirectory -->
        <sourceDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/java/org/exoplatform/services/jcr/impl/core/query/sql/</sourceDirectory>
        <!-- sourceDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/grammar/sql/</sourceDirectory -->
        <!-- sourceDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/grammar/xpath/</sourceDirectory -->
        <!-- outputDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/java/org/exoplatform/services/jcr/impl/core/query/xpath/</outputDirectory -->
        <outputDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/java/org/exoplatform/services/jcr/impl/core/query/sql/</outputDirectory>
      </configuration>
      <goals>
        <goal>javacc</goal>
        <!-- goal>jjtree</goal -->
      </goals>
    </execution>
  </executions>
</plugin>
...
---------

  Than, execute next command:

  mvn generate-sources

  This command will generate *.java files, related to the JAVACC parser and SQL.

  Change the pom by fourth configuration:

---------
...
<plugin>
  <groupId>org.codehaus.mojo</groupId>
  <artifactId>javacc-maven-plugin</artifactId>
  <version>2.0</version>
  <executions>
    <execution>
      <phase>generate-sources</phase>
      <configuration>
        <!-- sourceDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/java/org/exoplatform/services/jcr/impl/core/query/xpath/</sourceDirectory -->
        <!-- sourceDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/java/org/exoplatform/services/jcr/impl/core/query/sql/</sourceDirectory -->
        <sourceDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/grammar/sql/</sourceDirectory>
        <!-- sourceDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/grammar/xpath/</sourceDirectory -->
        <!-- outputDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/java/org/exoplatform/services/jcr/impl/core/query/xpath/</outputDirectory -->
        <outputDirectory>${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/java/org/exoplatform/services/jcr/impl/core/query/sql/</outputDirectory>
      </configuration>
      <goals>
        <!-- goal>javacc</goal -->
        <goal>jjtree</goal>
      </goals>
    </execution>
  </executions>
</plugin>
...
---------

  Than, execute next command:

  mvn generate-sources

  This command will generate *.java files, related to the JJTREE and SQL.


  <<For XPATH grammar>>

  The ${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/java/org/exoplatform/services/jcr/impl/core/query/xpath/ directory contains files for XPATH grammar.

  * Next files will be created by JavaCC task using .jj file

   ParseException.java

   SimpleCharStream.java

   Token.java

   TokenMgrError.java

   XPathTokenManager.java

   XPath.java

  * Next files will be created by JJTree task using .jjt file

   Node.java

   JJTXpathState.java

   XPathTreeConstants.java

   XPathConstants.java

   XpathVisitor.java

  * Next files created by developers, independently from parser

   XPathQueryBuilder.java

   SimpleNode.java

   QueryFormat.java

   QueryBuilder.java

  <<For SQL grammar>>

  The ${exo.directory.base}/projects/v2.x/exo-jcr/services/jcr/impl/src/java/org/exoplatform/services/jcr/impl/core/query/sql/ directory contains files for SQL grammar.

  * Next files will be created by JavaCC task using .jj file

   ParseException.java

   SimpleCharStream.java

   Token.java

   TokenMgrError.java

   JCRSQLParser.java

   JCRSQLParserConstants.java

   JCRSQLParserTokenManager.java

  * Next files will be created by JJTree task using .jjt file

   ASTAndExpression.java

   ASTAscendingOrderSpec.java

   ASTBracketExpression.java

   ASTDescendingOrderSpec.java

   ASTFromClause.java

   ASTNotExpression.java

   ASTOrderByClause.java

   ASTOrderSpec.java

   ASTOrExpression.java

   ASTQuery.java

   ASTSelectList.java

   ASTWhereClause.java

   JCRSQLParserTreeConstants.java

   JCRSQLParserVisitor.java

   JJTJCRSQLParserState.java

   Node.java

   SimpleNode.java


  * Next files created by developers, independently from parser

   ASTContainsExpression.java

   ASTIdentifier.java

   ASTLiteral.java

   DefaultParserVisitor.java

   ASTPredicate.java

   JCRSQLQueryBuilder.java

   QueryFormat.java


