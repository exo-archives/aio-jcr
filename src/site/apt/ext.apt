                                    ----------------------
                                    JCR service extensions
                                    ----------------------

JCR service extensions

* Concept:

  eXo JCR supports Observation (JSR-170 8.3), which enables applications to register
  interest in events that describe changes to a workspace, and then monitor and respond to
  those events. In addidtion to standard Observation feature, which allows dispatching 
  events when <<persistent change>> to the workspace is made, eXo JCR offers proprietary
  extension which dispatches and fires event upon each transient session level changes are
  performed by a client (on the other words when client's program invokes some (JCR API) 
  updating method on session or workspace (such as: Session.addNode(), Session.setProperty(),
  Workspace.move() etc.)

* Configuration:

  Add SessionActionCatalog service and appropriate AddActionsPlugin (see example below) 
  configuration to your Exo Container configuration (as usually the Plugin can be configured
  as in-component-place, which is the case for Standalone Container or externally, which is 
  usual case for Root/Portal Container configuration). 

  Each Action entry exposed as <org.exoplatform.services.jcr.impl.ext.action.ActionConfiguration>
  of <actions> collection of <org.exoplatform.services.jcr.impl.ext.action.AddActionsPlugin$ActionsConfig>
  (see an exaple below). The mandatory field named <<actionClassName>> it is the full qualified name of 
  <org.exoplatform.services.command.action.Action> implementation - the command will be launched
  in a case if current event matches to the criterias. All other fields are criterias. 
  The criterias are ANDed together. In other words, for particular item to be listened to it must meet
  ALL the criterias.

  <<eventTypes>> Comma delimited (ORed) list of Event names (see below) to be listened to. This is the 
  only mandatory field, others are optional and in a case of exclusion are interpreted as ANY.
  
  <<path>> comma delimited (ORed) list of Item absolute paths (or within its subtree if <<isDeep>> is <true>,
  which is the default value)

  <<nodeType>> comma delimited (ORed) list of current NodeType (in a case if current item is node)

  <<parentNodeType>> comma delimited (ORed) list of parent's NodeType

  <<workspace>> comma delimited (ORed) list of workspace


  NOTE: list of fields can be extended.

  NOTE2: no spaces between list elements

  List of supported Events names: addNode, addProperty, changeProperty, removeProperty, addMixin, removeNode

------------------
   
  <component>
    <type>org.exoplatform.services.jcr.impl.ext.action.SessionActionCatalog</type>
 
    <component-plugins>
      <component-plugin>
        <name>addActions</name>
        <set-method>addPlugin</set-method>
        <type>org.exoplatform.services.jcr.impl.ext.action.AddActionsPlugin</type>
        <description>add actions plugin</description>
        <init-params>
          <object-param>
            <name>actions</name>
            <object type="org.exoplatform.services.jcr.impl.ext.action.AddActionsPlugin$ActionsConfig">
              <field  name="actions">
                <collection type="java.util.ArrayList">
                  <value>
                    <object type="org.exoplatform.services.jcr.impl.ext.action.ActionConfiguration">
                      <field  name="eventTypes"><string>addNode,</string></field>
                      <field  name="path"><string>/test,/exo:test1</string></field>       
                      <field  name="isDeep"><boolean>true</boolean></field>       
                      <field  name="nodeType"><string>nt:base</string></field>       
                      <field  name="parentNodeType"><string>nt:unstructured</string></field>       
                      <!-- field  name="workspace"><string>production</string></field -->
                      <field  name="actionClassName"><string>org.exoplatform.services.jcr.ext.DummyAction</string></field>       
                    </object>
                  </value>
                </collection>
              </field>
            </object>
          </object-param>
        </init-params>
      </component-plugin>
 
    </component-plugins>
 
  </component>

------------------

