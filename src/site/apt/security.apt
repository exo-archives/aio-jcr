                             --------
                             Access Control
                             ------- 

Access Control

  eXo JCR is a complete implementation of standard JSR 170: content 
  {{{http://jcp.org/en/jsr/detail?id=170}Repository for Java TM Technology API}},
  including Level 1, Level 2 and Additional Features as it specified in JCR 
  Specification. 

  JSR 170 does not have many requirements about Access Control. Actually it 
  requires implementation of <Session.checkPermission(String absPath, String action)> 
  method that checks if current session has permission to perform some actions 
  (action parameter it is a list of comma delimited strings) on absPath. 
  There are 4 types of actions defined in JSR 170:

*--+--+
|<<Action name>>|<<Description>>
*--+--+
|add_node|Permission to add a node
*--+--+
|set_property|Permission to set a property
*--+--+
|remove|Permission to remove an item (node or property)
*--+--+
|read| Permission to retrieve (and read a value of, in the case of a property) an item
*--+--+

  eXo JCR has proprietary extensions to manage and check permissions using 
  Access Control List (ACL) policy model and eXo Organization service 
  (see eXo Platform Organization Service). According to those extensions:

   * User can manage and discover access to a <<exo:privilegeable>> (described below) Node's 
  content using eXo JCR's ExtendedNode interface which extends <javax.jcr.Node> 
  interface with dedicated Access Control methods as follows:

*-----------------+-----------+
|<<Method signature>> |<<Description>>|
*------------------------------------------------------+--------------------------------------------+
|void setPermissions(Map<String, String[]> permissions)|	Assigns set of Permissions to a node|
*------------------------------------------------------+--------------------------------------------+
|void setPermission(String identity, String[] permission)|	Assigns some Identity's Permission to a node
*--+--+
|void removePermission(String identity)|			Remove Identity's Permission 
*--+--+
|void clearACL()|						Clears current ACL so it becomes default
*--+--+
|AccessControlList getACL()|					Returns current ACL
*--+--+
|void checkPermission(String actions)|				Checks Permission (AccessDeniedException will be thrown if denied)
*--+--+

   * Every node contains an <<Access Control List>> - a set of <<Access Control Entries>> for specific principals. 
  An Access Control Entry is the association of a Privilege to a specific 
  <<Principal>>. For the time being eXo JCR uses list of <<Privileges>> as defined for 
  action permissions (i.e. add_node, set_property, remove and read). 
  Principal (Identity) it is recognizable by Organization Service identifier 
  (User  or Group name etc): 

   * Node's ACL is recognized as follows: 

     * If underlying node is exo:privilegeable node type its Access Control list's Permissions field is filled with exo:permissions property values. 

     * If underlying node is exo:owneable node type its Access Control list's Owner field is filled with its exo:owner property value. 

     * If underlying node is not exo:privilegeable it inherits Permissions from the parent. If underlying node is not exo:owneable it inherits Owner from the parent.

     * If the Root node has not implicitly set ACL, default values of Permissions and/or Owner is applied. Default Permissions values is ANY user (except an Anonimous) has full set of Privileges (read only for Anonimous) and default Owner value is System (virtual identity).

   * <<exo:privilegeable>> mixin node type is defined as follows: 

----------------

<nodeType name="exo:privilegeable" isMixin="true" hasOrderableChildNodes="false" primaryItemName="">
    <propertyDefinitions>
      <propertyDefinition name="exo:permissions" requiredType="Permission" autoCreated="true" mandatory="true"
        onParentVersion="COPY" protected="true" multiple="true">
        <valueConstraints/>  
     </propertyDefinition>        
    </propertyDefinitions>  
</nodeType>

----------------

  The permission of particular type is defined for Node's children. 
  I.e granularity is ALL Items(for <<READ>> and <<REMOVE>>), Nodes(for <<ADD_NODE>>) 
  and Properties(for <<SET_PROPERTY>>)

   * exo:owneable node type is defined as follows:

---------------

<nodeType name="exo:owneable" isMixin="true" hasOrderableChildNodes="false" primaryItemName="">
    <propertyDefinitions>
      <propertyDefinition name="exo:owner" requiredType="String" autoCreated="true" mandatory="true" onParentVersion="COPY"
        protected="true" multiple="false">
        <valueConstraints/>
      </propertyDefinition>        
    </propertyDefinitions>
</nodeType>

----------------

   * User which name is specified as Owner of exo:owneable node has full access to this node independently on underlying Permissions

   * System virtual user identifies program internal process, JCR Session associated  with System virtual user has full access to any node independently on underlying Permissions

   * By default Nodes are not exo:privilegeable nor exo:owneable but it is possible to configure Repository to auto-create  exo:privilegeable or/and exo:owneable thanks to eXo JCR Interceptors extension.
