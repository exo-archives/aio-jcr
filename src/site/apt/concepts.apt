<<JCR (JSR-170) API main concepts>>

  Java Content Repository API as well as other Java language related standards is created within the Java Community Process (http://jcp.org/) as a result of collaboration of expert group and Java community and known as JSR-170 (Java Specification Request) http://www.jcp.org/en/jsr/detail?id=170.

  <<Data model>>

  As the main purpose or content repository is to maintain the data - the heart of CR is data model.
  The main data storage abstraction of JCR's data model is workspace. 
  Each repository should have one or more workspaces. 
  Content is stored in workspace as hierarchy of items. 

  Each workspace has own hierarchy of items. 	
  There are 2 types of item: node and property. The following UML diagram summarizes relationships between these entities. Each item (node and property) has one parent Node (except root node). Each node can have one or more child nodes and properties.

[images/item.gif]
 
  Node is intended to support data hierarchy. They are typed using namespaced names which allows content to be structured according to standardized constraints.
  A node may be versioned through an associated version graph (optional feature)

  Property stored data itself as values of predefined types (String, Binary, Long, Boolean, Double, Date, Reference, Path). 

  It is important to note that the data model for the interface (the repository model) is rarely the same as the data models used by the repository's underlying storage subsystems.
  The repository knows how to make the client's changes persistent because that is part of the repository configuration, rather than part of the application programming task.


  JCR included 2 levels of required functionality and set of optional features that can be accessed via standardized API. 

