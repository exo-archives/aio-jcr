EXO-JCR RMI server

  There is demo RMI server in EXO-JCR package

*---*
<<EXO-JCR RMI server building/configuration>>
*---*

  To build EXO-JCR RMI server just run <<mvn clean install>> in <exo-jcr/applications/rmi-server>. After that RMI
  server workspace will be created in directory <exo-jcr/applications/rmi-server/run>. The directory contains:

  * subdirectory <cb> - codebase for RMI subsystem

  * subdirectory <lib> - classpath of JCR repository

  * files <configuration.xml> and <exo-jcr-config.xml> - configuration of JCR repository

  * file <java.policy> - JVM policy file

  * file <jaas.conf> - JAAS configuration file

  * file <run.bat> - batch file to run the server

  The default port number the server searches RMI registry at is 9999. You can change that editing parameter
  <rmiPort> of component <org.exoplatform.services.jcr.rmi.RMIBinder> in file <configuration.xml>.

[]
*---*
<<EXO-JCR RMI server starting/using>>
*---*

  To run EXO-JCR RMI server you have to:

  * run <%JAVAHOME%/bin/rmiregistry.exe 9999> (or other desired value instead of 9999) to run
    RMI registry

  * run <run/run.bat> to set up the repository itself and to register it in RMI registry

  * get access to it from anywhere at <<//serverhostname:9999/repository>> (or other desired value instead of 9999)

Accessing EXO-JCR RMI server


*---*
<<What you need to access EXO-JCR RMI server>>
*---*

  At the first we need some jar's that contain all classes to access remote repository
  
  * <exo-jcr.services.jcr.api-1.5.jar> - EXO-JCR API interfaces/classes

  * <exo-jcr.services.jcr.rmi.api-1.5.jar> - EXO-JCR RMI Client  side API and common interfaces/classes

  * <exo-jcr.services.jcr.rmi.impl-1.5.jar> - EXO-JCR RMI Server side API interfaces/classes
  
  When we have all that stuff we need to write a class that will use the repository and to wrap it into...
  
  * <someClass.jar> - some handmade class having <static ... main()> method we like to access to a repository with

  And at the last we have batch file like the following:

---------
@echo off
set CLASSPATH=%CLASSPATH%;exo-jcr.services.jcr.api-1.5.jar;exo-jcr.services.jcr.rmi.api-1.5.jar;exo-jcr.services.jcr.rmi.impl-1.5.jar;someClass.jar
java org.exoplatform.jcr.someClass
---------

[]
*---*
<<Sample code to access remote EXO-JCR repository with RMI>>
*---*

  Here's an example source of a class that uses a remote repository:

---------
public class someClass {

  public static void main(String[] argv) {

    try {
      ClientRepositoryFactory factory = new ClientRepositoryFactory();
      Repository repository = factory.getRepository("//localhost:9999/repository");
      Credentials credentials = new SimpleCredentials("admin", "admin".toCharArray());
      Session session = repository.login(credentials, "production");
      Node node = session.getRootNode();
      System.out.println("root node path: " + node.getPath());
    } catch (Exception e) {
      e.printStackTrace();
    }

  }

}
---------
