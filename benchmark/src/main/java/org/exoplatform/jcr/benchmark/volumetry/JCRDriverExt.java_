/***************************************************************************
 * Copyright 2001-2007 The eXo Platform SARL         All rights reserved.  *
 * Please look at license.txt in info directory for more license detail.   *
 **************************************************************************/
package org.exoplatform.jcr.benchmark.volumetry;

import javax.jcr.LoginException;
import javax.jcr.RepositoryException;

import org.exoplatform.jcr.benchmark.JCRDriver;
import org.exoplatform.jcr.benchmark.JCRTestContext;

import com.sun.japex.TestCase;

/**
 * Created by The eXo Platform SARL
 * Author : Alex Reshetnyak
 *          alex.reshetnyak@exoplatform.org.ua
 *          reshetnyak.alex@gmail.com		
 * 14.05.2007 11:17:01 
 * @version $Id: JCRDriverExt.java 14.05.2007 11:17:01 rainfox 
 */
public class JCRDriverExt extends JCRDriver {

  protected String testroot;
  
  protected String sMimeType;
  
  protected String sFile;
  
  protected String sTree;
  
  public void initializeDriver() {
    super.initializeDriver();
    
    if(!hasParam("test.testroot"))
      throw new RuntimeException("<test.testroot> parameter required");
    if(!hasParam("test.mimetype"))
      throw new RuntimeException("<test.mimetype> parameter required");
    if(!hasParam("test.file"))
      throw new RuntimeException("<test.file> parameter required");
    if(!hasParam("test.tree"))
      throw new RuntimeException("<test.tree> parameter required");
    
    testroot = getParam("test.testroot");
    sMimeType = getParam("test.mimetype");
    sFile = getParam("test.file");
    sTree = getParam("test.tree");
  }
  
  
  private synchronized JCRTestContext initContext(TestCase tc, JCRTestContext context) {
    context.setSession(oneSession);

    if(!hasParam("jcr.sessionPolicy"))
      throw new RuntimeException("<jcr.sessionPolicy> parameter required");
    String sessionPolicy = getParam("jcr.sessionPolicy"); 
    if(sessionPolicy.equalsIgnoreCase("single"))
      context.setSession(oneSession);
    else if(sessionPolicy.equalsIgnoreCase("multiple"))
      try {
        context.setSession(repository.login(credentials, workspace));
      } catch (LoginException e) {
        throw new RuntimeException(e);
      } catch (RepositoryException e) {
        throw new RuntimeException(e);
      }
    else
      throw new RuntimeException("<sessionPolicy> parameter expects 'single' or 'multiple' values. Found "+sessionPolicy);

    return context;
  }
    
}
