<<Levels of Compatibility>>

  The Java Content Repository specification has been split into two compliance levels as well as a set of optional features.

 <<Level 1>>

  Includes read only functionality for very simply repositories. Useful to port 
  existed data repository and convert to more advanced forms step by step.
  JCR uses well known Session abstraction to access the repository data 
  (like ones we have in OS, web etc)

  <<Level 1 features:>> 

  * Initiating a session calling login method with name of desired workspace and 
    credentials of client. Involves some security mechanism (JAAS) to authenticate 
    the client and in a case if client is authorized to use the data from particular 
    workspace he retrieves the Session with workspace tied to it.

  * Using the obtained session client can retrieve data (items) using: traversing the 
    tree, directly accessing particular item (requesting path or UUID) or traversing 
    the query result. So application developer can choose the "best" form depending on 
    content structure and desired operation(Examples)

  * Reading property values. All content of repository is ultimately accessed through 
    properties and stored in property values of predefined types (Boolean, Binary, Data, 
    Double, Long, String) and special types Name, Reference, Path. It is possible to read 
    property value without knowing its real name as primary item.

  * Export to XML. Repository supports 2 XML/JCR data model mappings: system and doc view. 
    System view provides complete XML serialization without lost of information and is somewhat 
    difficult for human to read. In contrast document view is good readable but doed not complete 
    reflect the state of repository, it is used for Xpath queries.

  * Query facility with Xpath syntax. Xpath originally developed for XML suits for JCR data model 
    as well because the JCR data model is very close to XML's one. It is applied to JCR as it would 
    be applied to document view of serialized repository content, returning table of property names 
    and content matching the query.

  * Discovery of available node types. Every node should have only one primary node type that defines 
    names, types and other characteristics of child nodes and properties. It also can have one or more 
    mixin data types that defines additional characteristics. Level 1 provides methods for discovering 
    available in repository node types and node types of concrete node.

  * Transient namespace remapping. Item name can have prefix delimited by a single colon ":" character 
    indicating the namespace of this name. It is patterned after XML namespaces, prefix is mapped to 
    URI to minimize names collisions. In Level 1 prefix can be temporary overridden by another prefix 
    in scope of session.

[images/level1.gif]

 <<Level 2>>

  JCR level 2 includes reading/writing content functionality, importing from 
  other sources and managing content definition and structuring using extensible node types. 

  <<In addition to the Level 1 it must support following major futures:>>

  * Adding, moving, copying and removing items inside workspace and moving, copying and cloning 
    items between workspaces. Client can also compare the persisted state of item with its unsaved 
    states and either save the new state or discard altogether.

  * Modifying and writing value of properties. Property types are checked and can be converted to the defined format.

  * Import from XML document into the repository as a tree of nodes and properties. If XML document is in a form of 
    JCR system view the content of repository can be completely restored, in other case it is interpreted as document 
    view and import builds a tree of JCR nodes and properties that match structure tree of XML document.

  * Assigning node types to nodes. Primary node type is assigned in adding node and it can be done automatically based 
    on parent node type definition and mixin node types.

  * Persistent namespaces changes. Add, change and remove namespaces stored in namespace registry, excluding built-in 
    namespaces required by JCR.

[images/level2.gif]

 <<Optional features>>

  On top of Level 1 or Level 2 a number of functional block serve for more advanced repository functionality. This includes functions like: Versioning, (JTA) Transactions, Query using SQL, Explicit Locking and Content Observation.

[images/optionnal.gif]
