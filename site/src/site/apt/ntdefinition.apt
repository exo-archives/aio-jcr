  Node types and namespaces support is required by JSR-170 Specs

  Besides the mathods required by Specs eXo JCR has own API extension for Node type registration as well as ability to define node types in Repository start-up time declaratively. 

<<Node Types definition>>

  Node type registration extension is declared in <org.exoplatform.services.jcr.core.nodetype.ExtendedNodeTypeManager> interface 

  Your custom service can register some neccessary predefined node types in start-up time. The node definition should be placed in special XML file (see DTD below) and declared in service's configuration file thanks to eXo component plugin mechanism as follows:

---------
  <external-component-plugins>
  <target-component>org.exoplatform.services.jcr.RepositoryService</target-component>
  <component-plugin> 
    <name>add.nodeType</name>
    <set-method>addPlugin</set-method>
    <type>org.exoplatform.services.jcr.impl.AddNodeTypePlugin</type>
    <init-params>
      <values-param>
        <name>nodeTypesFiles</name>
        <description>Node types configuration file</description>
        <value>jar:/conf/nodetypes-config.xml</value>
      </values-param>
    </init-params>
  </component-plugin>
  </external-component-plugins>
---------

Node type definition file format:

---------

  <?xml version="1.0" encoding="UTF-8"?>
  <!DOCTYPE nodeTypes [
	<!ELEMENT nodeTypes (nodeType)*>
		<!ELEMENT nodeType (supertypes?|propertyDefinitions?|childNodeDefinitions?)>

		<!ATTLIST nodeType
			name CDATA #REQUIRED
			isMixin (true|false) #REQUIRED
 			hasOrderableChildNodes (true|false)
			primaryItemName CDATA
		>
		<!ELEMENT supertypes (supertype*)>
		<!ELEMENT supertype (CDATA)>
	
		<!ELEMENT propertyDefinitions (propertyDefinition*)>

		<!ELEMENT propertyDefinition (valueConstraints?|defaultValues?)>
		<!ATTLIST propertyDefinition
			name CDATA #REQUIRED
			requiredType (String|Date|Path|Name|Reference|Binary|Double|Long|Boolean|undefined) #REQUIRED
			autoCreated (true|false) #REQUIRED
			mandatory (true|false) #REQUIRED
			onParentVersion (COPY|VERSION|INITIALIZE|COMPUTE|IGNORE|ABORT) #REQUIRED
			protected (true|false) #REQUIRED
			multiple  (true|false) #REQUIRED
		>    
    <!-- For example if you need to set ValueConstraints [], 
      you have to add empty element <valueConstraints/>. 
      Same order for other properties like defaultValues, requiredPrimaryTypes etc.
      -->  
		<!ELEMENT valueConstraints (valueConstraint*)>
		<!ELEMENT valueConstraint (CDATA)>
		<!ELEMENT defaultValues (defaultValue*)>
		<!ELEMENT defaultValue (CDATA)>

		<!ELEMENT childNodeDefinitions (childNodeDefinition*)>

		<!ELEMENT childNodeDefinition (requiredPrimaryTypes)>
		<!ATTLIST childNodeDefinition
			name CDATA #REQUIRED
			defaultPrimaryType  CDATA #REQUIRED
			autoCreated (true|false) #REQUIRED
			mandatory (true|false) #REQUIRED
			onParentVersion (COPY|VERSION|INITIALIZE|COMPUTE|IGNORE|ABORT) #REQUIRED
			protected (true|false) #REQUIRED
			sameNameSiblings (true|false) #REQUIRED
		>
		<!ELEMENT requiredPrimaryTypes (requiredPrimaryType+)>
		<!ELEMENT requiredPrimaryType (CDATA)>  
]>
---------

<<Namespaces definition>>

  Default namespaces are registered by repository in start-up time 

  Your custom service can extend set of namespaces with some application specific ones declaring its in service's configuration file thanks to eXo component plugin mechanism as follows:

-----------
      <component-plugin> 
          <name>add.namespaces</name>
          <set-method>addPlugin</set-method>
          <type>org.exoplatform.services.jcr.impl.AddNamespacesPlugin</type>
          <init-params>
            <properties-param>
              <name>namespaces</name>
              <property name="test" value="http://www.test.org/test"/>
            </properties-param>      
          </init-params>                  
      </component-plugin>
----------- 