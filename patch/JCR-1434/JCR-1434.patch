Index: component/webdav/src/main/java/org/exoplatform/services/jcr/webdav/xml/PropstatGroupedRepresentation.java
===================================================================
--- component/webdav/src/main/java/org/exoplatform/services/jcr/webdav/xml/PropstatGroupedRepresentation.java	(revision 51632)
+++ component/webdav/src/main/java/org/exoplatform/services/jcr/webdav/xml/PropstatGroupedRepresentation.java	(working copy)
@@ -17,6 +17,7 @@
 
 package org.exoplatform.services.jcr.webdav.xml;
 
+import java.security.AccessControlException;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -27,11 +28,14 @@
 import javax.jcr.ItemNotFoundException;
 import javax.jcr.PathNotFoundException;
 import javax.jcr.RepositoryException;
+import javax.jcr.Session;
 import javax.xml.namespace.QName;
 
 import org.exoplatform.common.util.HierarchicalProperty;
+import org.exoplatform.services.jcr.access.PermissionType;
 import org.exoplatform.services.jcr.webdav.WebDavStatus;
 import org.exoplatform.services.jcr.webdav.resource.Resource;
+import org.exoplatform.services.jcr.webdav.util.PropertyConstants;
 
 /**
  * Created by The eXo Platform SARL .<br/>
@@ -50,11 +54,15 @@
 
   protected final Resource                               resource;
 
+  protected final Session                                session;
+
   public PropstatGroupedRepresentation(final Resource resource,
                                        final Set<QName> propNames,
-                                       boolean namesOnly) throws RepositoryException {
+                                       boolean namesOnly,
+                                       Session session) throws RepositoryException {
     this.namesOnly = namesOnly;
     this.resource = resource;
+    this.session = session;
     this.propStats = new HashMap<String, Set<HierarchicalProperty>>();
 
     this.propNames = propNames;
@@ -69,6 +77,12 @@
     }
   }
 
+  public PropstatGroupedRepresentation(final Resource resource,
+                                       final Set<QName> propNames,
+                                       boolean namesOnly) throws RepositoryException {
+    this(resource, propNames, namesOnly, null);
+  }
+
   public final Map<String, Set<HierarchicalProperty>> getPropStats() throws RepositoryException {
     String statname = WebDavStatus.getStatusDescription(WebDavStatus.OK);
     if (propNames == null) {
@@ -78,9 +92,17 @@
       for (QName propName : propNames) {
         HierarchicalProperty prop = new HierarchicalProperty(propName);
         try {
-          prop = resource.getProperty(propName);
-          statname = WebDavStatus.getStatusDescription(WebDavStatus.OK);
-
+          if (propName.equals(PropertyConstants.IS_READ_ONLY) && session != null) {
+            if (isReadOnly()) {
+              prop.setValue("1");
+            } else {
+              prop.setValue("0");
+            }
+            statname = WebDavStatus.getStatusDescription(WebDavStatus.OK);
+          } else {
+            prop = resource.getProperty(propName);
+            statname = WebDavStatus.getStatusDescription(WebDavStatus.OK);
+          }
         } catch (AccessDeniedException e) {
           statname = WebDavStatus.getStatusDescription(WebDavStatus.FORBIDDEN);
           e.printStackTrace();
@@ -106,4 +128,31 @@
     return propStats;
   }
 
+  private boolean isReadOnly() {
+
+    String resourcePath = resource.getIdentifier().getPath();
+    String workspace = session.getWorkspace().getName();
+    String path = resourcePath.substring(resourcePath.indexOf(workspace) + workspace.length());
+
+    try {
+      session.checkPermission(path, PermissionType.READ);
+    } catch (AccessControlException e1) {
+      return false;
+    } catch (RepositoryException e1) {
+      return false;
+    }
+
+    // Node must not have any permission except "set_property" so checking for
+    // this permission
+    // must throw AccessControlException
+    try {
+      session.checkPermission(path, PermissionType.SET_PROPERTY);
+      return false;
+    } catch (AccessControlException e) {
+      return true;
+    } catch (RepositoryException e) {
+      return false;
+    }
+  }
+
 }
Index: component/webdav/src/main/java/org/exoplatform/services/jcr/webdav/util/PropertyConstants.java
===================================================================
--- component/webdav/src/main/java/org/exoplatform/services/jcr/webdav/util/PropertyConstants.java	(revision 51632)
+++ component/webdav/src/main/java/org/exoplatform/services/jcr/webdav/util/PropertyConstants.java	(working copy)
@@ -72,6 +72,8 @@
   public static final QName  WRITE                = new QName("DAV:", "write");
 
   public static final QName  ORDERING_TYPE        = new QName("DAV:", "ordering-type");
+  
+  public static final QName IS_READ_ONLY = new QName("DAV:", "isreadonly");
 
   // date and time patterns for DAV:creationdate and DAV:getlastmodified
 
Index: component/webdav/src/main/java/org/exoplatform/services/jcr/webdav/command/propfind/PropFindResponseEntity.java
===================================================================
--- component/webdav/src/main/java/org/exoplatform/services/jcr/webdav/command/propfind/PropFindResponseEntity.java	(revision 51632)
+++ component/webdav/src/main/java/org/exoplatform/services/jcr/webdav/command/propfind/PropFindResponseEntity.java	(working copy)
@@ -25,6 +25,7 @@
 import java.util.Set;
 
 import javax.jcr.RepositoryException;
+import javax.jcr.Session;
 import javax.xml.namespace.QName;
 import javax.xml.stream.XMLOutputFactory;
 import javax.xml.stream.XMLStreamException;
@@ -63,17 +64,28 @@
 
   protected final boolean                propertyNamesOnly;
 
+  protected final Session                session;
+
   public PropFindResponseEntity(int depth,
                                 Resource rootResource,
                                 Set<QName> propertyNames,
-                                boolean propertyNamesOnly) {
+                                boolean propertyNamesOnly,
+                                Session session) {
     this.rootResource = rootResource;
     this.namespaceContext = rootResource.getNamespaceContext();
     this.propertyNames = propertyNames;
     this.depth = depth;
     this.propertyNamesOnly = propertyNamesOnly;
+    this.session = session;
   }
 
+  public PropFindResponseEntity(int depth,
+                                Resource rootResource,
+                                Set<QName> propertyNames,
+                                boolean propertyNamesOnly) {
+    this(depth, rootResource, propertyNames, propertyNamesOnly, null);
+  }
+
   /*
    * (non-Javadoc)
    * @see
@@ -111,7 +123,8 @@
   private void traverseResources(Resource resource, int counter) throws XMLStreamException,
                                                                 RepositoryException,
                                                                 IllegalResourceTypeException,
-                                                                URISyntaxException, UnsupportedEncodingException {
+                                                                URISyntaxException,
+                                                                UnsupportedEncodingException {
 
     xmlStreamWriter.writeStartElement("DAV:", "response");
 
@@ -127,7 +140,8 @@
 
     PropstatGroupedRepresentation propstat = new PropstatGroupedRepresentation(resource,
                                                                                propertyNames,
-                                                                               propertyNamesOnly);
+                                                                               propertyNamesOnly,
+                                                                               session);
 
     PropertyWriteUtil.writePropStats(xmlStreamWriter, propstat.getPropStats());
 
Index: component/webdav/src/main/java/org/exoplatform/services/jcr/webdav/command/PropFindCommand.java
===================================================================
--- component/webdav/src/main/java/org/exoplatform/services/jcr/webdav/command/PropFindCommand.java	(revision 51632)
+++ component/webdav/src/main/java/org/exoplatform/services/jcr/webdav/command/PropFindCommand.java	(working copy)
@@ -116,7 +116,7 @@
     } else if (request.getType().equalsIgnoreCase("propname")) {
       response = new PropFindResponseEntity(depth, resource, null, true);
     } else if (request.getType().equalsIgnoreCase("prop")) {
-      response = new PropFindResponseEntity(depth, resource, propertyNames(body), false);
+      response = new PropFindResponseEntity(depth, resource, propertyNames(body), false, session);
     } else {
       return Response.Builder.badRequest().errorMessage("Unexpected property name "
           + request.getType()).build();
