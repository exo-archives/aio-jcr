Index: component/webdav/src/main/java/org/exoplatform/services/jcr/webdav/resource/VersionResource.java
===================================================================
--- component/webdav/src/main/java/org/exoplatform/services/jcr/webdav/resource/VersionResource.java	(revision 62193)
+++ component/webdav/src/main/java/org/exoplatform/services/jcr/webdav/resource/VersionResource.java	(working copy)
@@ -133,6 +133,11 @@
       creationDate.setAttribute("b:dt", "dateTime.tz");
       return creationDate;
 
+    } else if (DeltaVConstants.GETLASTMODIFIED.equals(name)) {
+      Calendar created = version.getNode("jcr:frozenNode").getProperty("jcr:created").getDate();
+      HierarchicalProperty creationDate = new HierarchicalProperty(name, created, MODIFICATION_PATTERN);
+      creationDate.setAttribute("b:dt", "dateTime.1123");
+      return creationDate;
     } else {
       throw new PathNotFoundException();
     }
Index: component/webdav/src/main/java/org/exoplatform/services/jcr/webdav/WebDavConst.java
===================================================================
--- component/webdav/src/main/java/org/exoplatform/services/jcr/webdav/WebDavConst.java	(revision 62193)
+++ component/webdav/src/main/java/org/exoplatform/services/jcr/webdav/WebDavConst.java	(working copy)
@@ -557,7 +557,7 @@
     /**
      * If-Modified-Since date psttern.
     Â */
-    public static final String IF_MODIFIED_SINCE_PATTERN = "EEE, d MMM yyyy HH:mm:ss z";
+    public static final String IF_MODIFIED_SINCE_PATTERN = "EEE, dd MMM yyyy HH:mm:ss z";
     
     
   }
Index: component/webdav/src/main/java/org/exoplatform/services/jcr/webdav/command/GetCommand.java
===================================================================
--- component/webdav/src/main/java/org/exoplatform/services/jcr/webdav/command/GetCommand.java	(revision 62193)
+++ component/webdav/src/main/java/org/exoplatform/services/jcr/webdav/command/GetCommand.java	(working copy)
@@ -17,23 +17,6 @@
 
 package org.exoplatform.services.jcr.webdav.command;
 
-import java.io.InputStream;
-import java.net.URI;
-import java.text.DateFormat;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import javax.jcr.Node;
-import javax.jcr.PathNotFoundException;
-import javax.jcr.RepositoryException;
-import javax.jcr.Session;
-import javax.xml.transform.stream.StreamSource;
-
 import org.exoplatform.common.util.HierarchicalProperty;
 import org.exoplatform.common.util.MediaType;
 import org.exoplatform.common.util.MediaTypeHelper;
@@ -61,6 +44,24 @@
 import org.exoplatform.services.xml.transform.impl.trax.TRAXTemplatesServiceImpl;
 import org.exoplatform.services.xml.transform.trax.TRAXTemplatesService;
 
+import java.io.InputStream;
+import java.net.URI;
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+
+import javax.jcr.Node;
+import javax.jcr.PathNotFoundException;
+import javax.jcr.RepositoryException;
+import javax.jcr.Session;
+import javax.xml.transform.stream.StreamSource;
+
 /**
  * Created by The eXo Platform SAS Author : Vitaly Guly <gavrikvetal@gmail.com>
  * 
@@ -111,7 +112,7 @@
         if (version != null) {
           VersionedResource versionedFile = new VersionedFileResource(uri, node, nsContext);
           resource = versionedFile.getVersionHistory().getVersion(version);
-          lastModifiedProperty = resource.getProperty(FileResource.CREATIONDATE);
+          lastModifiedProperty = resource.getProperty(FileResource.GETLASTMODIFIED);
           istream = ((VersionResource) resource).getContentAsStream();
         } else {
           resource = new FileResource(uri, node, nsContext);
@@ -120,10 +121,10 @@
         }
 
         if (ifModifiedSince != null) {
-          DateFormat dateFormat = new SimpleDateFormat(WebDavConst.DateFormat.IF_MODIFIED_SINCE_PATTERN);
+          DateFormat dateFormat = new SimpleDateFormat(WebDavConst.DateFormat.MODIFICATION, Locale.US);
           Date lastModifiedDate = dateFormat.parse(lastModifiedProperty.getValue());
 
-          dateFormat = new SimpleDateFormat(WebDavConst.DateFormat.MODIFICATION);
+          dateFormat = new SimpleDateFormat(WebDavConst.DateFormat.IF_MODIFIED_SINCE_PATTERN, Locale.US);
           Date ifModifiedSinceDate = dateFormat.parse(ifModifiedSince);
 
           if (ifModifiedSinceDate.getTime() >= lastModifiedDate.getTime()) {
@@ -152,6 +153,7 @@
           return Response.Builder.ok()
                                  .header(WebDavHeaders.CONTENTLENGTH, Long.toString(contentLength))
                                  .header(WebDavHeaders.ACCEPT_RANGES, "bytes")
+                                 .header(WebDavConst.Headers.LASTMODIFIED, lastModifiedProperty.getValue())
                                  .header(WebDavConst.Headers.CACHECONTROL, 
                                         generateCacheControl(cacheControls, contentType))
                                  .entity(istream, contentType)
@@ -176,6 +178,7 @@
                                  .header(WebDavHeaders.CONTENTLENGTH,
                                          Long.toString(returnedContentLength))
                                  .header(WebDavHeaders.ACCEPT_RANGES, "bytes")
+                                 .header(WebDavConst.Headers.LASTMODIFIED, lastModifiedProperty.getValue())
                                  .header(WebDavHeaders.CONTENTRANGE,
                                          "bytes " + start + "-" + end + "/" + contentLength)
                                  .entity(rangedInputStream, contentType)
@@ -199,6 +202,7 @@
 
         return Response.Builder.withStatus(WebDavStatus.PARTIAL_CONTENT)
                                .header(WebDavHeaders.ACCEPT_RANGES, "bytes")
+                               .header(WebDavConst.Headers.LASTMODIFIED, lastModifiedProperty.getValue())
                                .entity(mByterangesEntity,
                                        WebDavHeaders.MULTIPART_BYTERANGES + WebDavConst.BOUNDARY)
                                .transformer(new SerializableTransformer())
