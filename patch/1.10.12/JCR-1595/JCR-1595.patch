Index: component/core/src/test/java/org/exoplatform/services/jcr/api/nodetypes/TestNodeDefinition.java
===================================================================
--- component/core/src/test/java/org/exoplatform/services/jcr/api/nodetypes/TestNodeDefinition.java	(revision 0)
+++ component/core/src/test/java/org/exoplatform/services/jcr/api/nodetypes/TestNodeDefinition.java	(revision 0)
@@ -0,0 +1,106 @@
+/*
+ * Copyright (C) 2003-2007 eXo Platform SAS.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Affero General Public License
+ * as published by the Free Software Foundation; either version 3
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see<http://www.gnu.org/licenses/>.
+ */
+package org.exoplatform.services.jcr.api.nodetypes;
+
+import org.exoplatform.services.jcr.JcrAPIBaseTest;
+import org.exoplatform.services.jcr.impl.core.NodeImpl;
+import org.exoplatform.services.jcr.impl.core.SessionImpl;
+
+import java.util.GregorianCalendar;
+
+import javax.jcr.Node;
+import javax.jcr.RepositoryException;
+import javax.jcr.version.Version;
+
+/**
+ * @author <a href="mailto:anatoliy.bazko@gmail.com">Anatoliy Bazko</a>
+ * @version $Id: TestNodeDefinitionWCM.java 34360 2009-07-22 23:58:59Z tolusha $
+ */
+public class TestNodeDefinition extends JcrAPIBaseTest {
+
+  public void testNodeTypeWCM1() throws Exception {
+    NodeImpl exoWebContent = (NodeImpl) session.getRootNode().addNode("exoWebContent",
+                                                                      "exo:webContent");
+    exoWebContent.setProperty("exo:title", "tit");
+    session.save();
+
+    // add nt:file
+    NodeImpl ntFile1 = (NodeImpl) exoWebContent.addNode("ntFile-1", "nt:file");
+    NodeImpl jcrContent = (NodeImpl) ntFile1.addNode("jcr:content", "nt:resource");
+    jcrContent.setProperty("jcr:data", "");
+    jcrContent.setProperty("jcr:mimeType", "");
+    jcrContent.setProperty("jcr:lastModified", new GregorianCalendar());
+    session.save();
+
+    exoWebContent.addMixin("exo:actionable");
+    session.save();
+
+    // add exo:actionStorage
+    NodeImpl actionStorage = (NodeImpl) exoWebContent.addNode("actionStorage", "exo:actionStorage");
+    session.save();
+
+    // add nt:file
+    NodeImpl ntFile2 = (NodeImpl) exoWebContent.addNode("ntFile-2", "nt:file");
+    jcrContent = (NodeImpl) ntFile2.addNode("jcr:content", "nt:resource");
+    jcrContent.setProperty("jcr:data", "");
+    jcrContent.setProperty("jcr:mimeType", "");
+    jcrContent.setProperty("jcr:lastModified", new GregorianCalendar());
+    session.save();
+
+    SessionImpl session = (SessionImpl) repository.login(credentials, WORKSPACE);
+
+    ntFile1 = (NodeImpl) session.getRootNode().getNode("exoWebContent").getNode("ntFile-1");
+    assertEquals(ntFile1.getDefinition().getRequiredPrimaryTypes()[0].getName(), "nt:base");
+
+    ntFile2 = (NodeImpl) session.getRootNode().getNode("exoWebContent").getNode("ntFile-2");
+    assertEquals(ntFile2.getDefinition().getRequiredPrimaryTypes()[0].getName(), "nt:base");
+
+    actionStorage = (NodeImpl) session.getRootNode()
+                                      .getNode("exoWebContent")
+                                      .getNode("actionStorage");
+    assertEquals(actionStorage.getDefinition().getRequiredPrimaryTypes()[0].getName(),
+                 "exo:actionStorage");
+  }
+
+  public void testNodeTypeWCM2() throws Exception {
+    Node parent = session.getRootNode().addNode("parent", "exo:newsletterCategory");
+    parent.addNode("child", "nt:unstructured");
+    parent.setProperty("exo:newsletterCategoryTitle", "title");
+    session.save();
+  }
+
+  public void testNTVersionedChild() throws Exception {
+    Node folder1 = session.getRootNode().addNode("folder1", "nt:folder");
+    Node folder2 = folder1.addNode("folder2", "nt:folder");
+    Node folder3 = folder2.addNode("folder3", "nt:folder");
+    folder1.addMixin("mix:versionable");
+    folder3.addMixin("mix:versionable");
+    session.save();
+
+    Version ver1 = folder1.checkin();
+    folder1.checkout();
+
+    folder3 = (NodeImpl) session.getItem("/jcr:system/jcr:versionStorage/"
+        + ver1.getParent().getUUID() + "/1/jcr:frozenNode/folder2/folder3");
+
+    try {
+      folder3.getDefinition();
+    } catch (RepositoryException e) {
+      fail();
+    }
+  }
+}
Index: component/core/src/test/resources/conf/test/wcm-nodetypes.xml
===================================================================
--- component/core/src/test/resources/conf/test/wcm-nodetypes.xml	(revision 68520)
+++ component/core/src/test/resources/conf/test/wcm-nodetypes.xml	(working copy)
@@ -253,4 +253,91 @@
     </propertyDefinitions>
   </nodeType>
 
+  <nodeType name="exo:newsletterEntry" isMixin="true" hasOrderableChildNodes="true" primaryItemName="">
+    <propertyDefinitions>
+      <propertyDefinition name="exo:newsletterEntryCategoryName" requiredType="String" autoCreated="true" mandatory="true" onParentVersion="COPY" protected="false" multiple="false">
+        <valueConstraints/>
+      </propertyDefinition>
+      <propertyDefinition name="exo:newsletterEntrySubscriptionName" requiredType="String" autoCreated="true" mandatory="true" onParentVersion="COPY" protected="false" multiple="false">
+        <valueConstraints/>
+      </propertyDefinition>
+      <propertyDefinition name="exo:newsletterEntryType" requiredType="String" autoCreated="true" mandatory="true" onParentVersion="COPY" protected="false" multiple="false">
+        <valueConstraints/>
+      </propertyDefinition>
+      <propertyDefinition name="exo:newsletterEntryDate" requiredType="Date" autoCreated="true" mandatory="true" onParentVersion="COPY" protected="false" multiple="false">
+        <valueConstraints/>
+      </propertyDefinition>
+      <propertyDefinition name="exo:newsletterEntryStatus" requiredType="String" autoCreated="true" mandatory="true" onParentVersion="COPY" protected="false" multiple="false">
+        <valueConstraints/>
+      </propertyDefinition>
+    </propertyDefinitions>
+  </nodeType>
+  
+  <nodeType name="exo:newsletterSubscription" isMixin="false" hasOrderableChildNodes="true" primaryItemName="">
+    <supertypes>
+      <supertype>nt:unstructured</supertype>
+      <supertype>mix:referenceable</supertype>
+    </supertypes>
+    <propertyDefinitions>
+      <propertyDefinition name="exo:newsletterSubscribedUser" requiredType="Reference" autoCreated="true" mandatory="false" onParentVersion="COPY" protected="false" multiple="true">
+        <valueConstraints/>
+      </propertyDefinition>
+    </propertyDefinitions>
+    <childNodeDefinitions>
+      <childNodeDefinition name="*" defaultPrimaryType="nt:base" autoCreated="false" mandatory="false" onParentVersion="VERSION" protected="false" sameNameSiblings="false">
+        <requiredPrimaryTypes>
+          <requiredPrimaryType>nt:base</requiredPrimaryType>
+        </requiredPrimaryTypes>
+      </childNodeDefinition>
+    </childNodeDefinitions>
+  </nodeType>
+  
+  <nodeType name="exo:newsletterCategory" isMixin="false" hasOrderableChildNodes="true" primaryItemName="">
+    <supertypes>
+      <supertype>nt:unstructured</supertype>
+    </supertypes>
+    <propertyDefinitions>
+      <propertyDefinition name="exo:newsletterCategoryTitle" requiredType="String" autoCreated="false" mandatory="true" onParentVersion="COPY" protected="false" multiple="false">
+        <valueConstraints/>
+      </propertyDefinition>
+      <propertyDefinition name="exo:newsletterCategoryDescription" requiredType="String" autoCreated="false" mandatory="false" onParentVersion="COPY" protected="false" multiple="false">
+        <valueConstraints/>
+      </propertyDefinition>
+    </propertyDefinitions>
+    <childNodeDefinitions>
+      <childNodeDefinition name="*" defaultPrimaryType="nt:unstructured" autoCreated="false" mandatory="false" onParentVersion="VERSION" protected="false" sameNameSiblings="false">
+        <requiredPrimaryTypes>
+          <requiredPrimaryType>nt:base</requiredPrimaryType>
+        </requiredPrimaryTypes>
+      </childNodeDefinition>
+      <childNodeDefinition name="*" defaultPrimaryType="exo:newsletterSubscription" autoCreated="false" mandatory="false" onParentVersion="VERSION" protected="false" sameNameSiblings="true">
+        <requiredPrimaryTypes>
+          <requiredPrimaryType>exo:newsletterSubscription</requiredPrimaryType>
+        </requiredPrimaryTypes>
+      </childNodeDefinition>
+    </childNodeDefinitions>
+  </nodeType>
+  
+  <nodeType name="exo:newsletterUser" isMixin="false" hasOrderableChildNodes="true" primaryItemName="">
+    <supertypes>
+      <supertype>nt:unstructured</supertype>
+      <supertype>mix:referenceable</supertype>
+    </supertypes>
+    <propertyDefinitions>
+      <propertyDefinition name="exo:newsletterUserMail" requiredType="String" autoCreated="true" mandatory="true" onParentVersion="COPY" protected="false" multiple="false">
+        <valueConstraints/>
+      </propertyDefinition>
+      <propertyDefinition name="exo:newsletterUserConfirm" requiredType="Boolean" autoCreated="true" mandatory="true" onParentVersion="COPY" protected="false" multiple="false">
+        <valueConstraints/>
+      </propertyDefinition>
+      <propertyDefinition name="exo:newsletterUserBanned" requiredType="Boolean" autoCreated="true" mandatory="true" onParentVersion="COPY" protected="false" multiple="false">
+        <valueConstraints/>
+      </propertyDefinition>
+      <propertyDefinition name="exo:newsletterUserValidationCode" requiredType="String" autoCreated="true" mandatory="true" onParentVersion="COPY" protected="false" multiple="false">
+        <valueConstraints/>
+      </propertyDefinition>
+    </propertyDefinitions>
+  </nodeType>
+
+
 </nodeTypes>
Index: component/core/src/main/java/org/exoplatform/services/jcr/impl/core/NodeImpl.java
===================================================================
--- component/core/src/main/java/org/exoplatform/services/jcr/impl/core/NodeImpl.java	(revision 68520)
+++ component/core/src/main/java/org/exoplatform/services/jcr/impl/core/NodeImpl.java	(working copy)
@@ -171,6 +171,7 @@
     this.definition = session.getWorkspace()
                              .getNodeTypeManager()
                              .findNodeDefinition(getInternalName(),
+                                                 nodeData().getPrimaryTypeName(),
                                                  parent.getPrimaryTypeName(),
                                                  parent.getMixinTypeNames());
 
@@ -624,6 +625,7 @@
     if (session.getWorkspace()
                .getNodeTypeManager()
                .findNodeDefinition(name,
+                                   primaryTypeName,
                                    nodeData().getPrimaryTypeName(),
                                    nodeData().getMixinTypeNames())
                .isProtected())
@@ -670,6 +672,7 @@
       def = session.getWorkspace()
                    .getNodeTypeManager()
                    .findNodeDefinition(name,
+                                       primaryTypeName,
                                        parentNode.nodeData().getPrimaryTypeName(),
                                        parentNode.nodeData().getMixinTypeNames());
     } finally {
@@ -701,7 +704,7 @@
 
     // List<NodeData> siblings = dataManager.getChildNodesData(parentNode.nodeData());
     int orderNum = parentNode.getNextChildOrderNum();
-    int index = parentNode.getNextChildIndex(name, parentNode.nodeData());
+    int index = parentNode.getNextChildIndex(name, parentNode.nodeData(), def);
 
     QPath path = QPath.makeChildPath(parentNode.getInternalPath(), name, index);
 
@@ -746,6 +749,7 @@
         NodeDefinition def = session.getWorkspace()
                                     .getNodeTypeManager()
                                     .findNodeDefinition(nameToAdd,
+                                                        sibling.getPrimaryTypeName(),
                                                         parentNode.getPrimaryTypeName(),
                                                         parentNode.getMixinTypeNames());
         if (log.isDebugEnabled())
@@ -1176,7 +1180,7 @@
           NodeImpl correspAncestor = (NodeImpl) correspSession.getNodeByUUID(ancestor.getUUID());
           JCRPath.PathElement[] relJCRPath = getLocation().getRelPath(getDepth() - i);
           try {
-            return (NodeImpl) correspAncestor.getNode(getRelPath(relJCRPath));
+            return correspAncestor.getNode(getRelPath(relJCRPath));
           } catch (ItemNotFoundException e) {
           }
         }
@@ -2545,15 +2549,8 @@
     return dataManager.getChildNodesCount(nodeData());
   }
 
-  private int getNextChildIndex(InternalQName nameToAdd, NodeData parentNode) throws RepositoryException,
-                                                                             ItemExistsException {
-
-    NodeDefinition def = session.getWorkspace()
-                                .getNodeTypeManager()
-                                .findNodeDefinition(nameToAdd,
-                                                    parentNode.getPrimaryTypeName(),
-                                                    parentNode.getMixinTypeNames());
-
+  private int getNextChildIndex(InternalQName nameToAdd, NodeData parentNode, NodeDefinition def) throws RepositoryException,
+                                                                                                 ItemExistsException {
     boolean allowSns = def.allowsSameNameSiblings();
 
     int ind = 1;
Index: component/core/src/main/java/org/exoplatform/services/jcr/impl/core/version/ItemDataCopyIgnoredVisitor.java
===================================================================
--- component/core/src/main/java/org/exoplatform/services/jcr/impl/core/version/ItemDataCopyIgnoredVisitor.java	(revision 68520)
+++ component/core/src/main/java/org/exoplatform/services/jcr/impl/core/version/ItemDataCopyIgnoredVisitor.java	(working copy)
@@ -55,6 +55,7 @@
     this.restoredChanges = changes;
   }
 
+  @Override
   protected void entering(PropertyData property, int level) throws RepositoryException {
 
     if (level == 1
@@ -97,6 +98,7 @@
     }
   }
 
+  @Override
   protected void entering(NodeData node, int level) throws RepositoryException {
 
     if (level == 0) {
@@ -106,6 +108,7 @@
       if (curParent() == null) {
         NodeData existedParent = (NodeData) dataManager.getItemData(node.getParentIdentifier());
         NodeDefinition ndef = ntManager.findNodeDefinition(node.getQPath().getName(),
+                                                           node.getPrimaryTypeName(),
                                                            existedParent.getPrimaryTypeName(),
                                                            existedParent.getMixinTypeNames());
 
@@ -140,6 +143,7 @@
     parents.push(null); // skip this node as we hasn't parent in restore result
   }
 
+  @Override
   protected void leaving(NodeData node, int level) throws RepositoryException {
     if (parents.size() > 0)
       parents.pop();
Index: component/core/src/main/java/org/exoplatform/services/jcr/impl/core/version/ItemDataRestoreVisitor.java
===================================================================
--- component/core/src/main/java/org/exoplatform/services/jcr/impl/core/version/ItemDataRestoreVisitor.java	(revision 68520)
+++ component/core/src/main/java/org/exoplatform/services/jcr/impl/core/version/ItemDataRestoreVisitor.java	(working copy)
@@ -119,6 +119,7 @@
             userSession.getUserState());
     }
 
+    @Override
     protected void validateReferential(NodeData node) throws RepositoryException {
       // no REFERENCE validation here
     }
@@ -250,6 +251,7 @@
                         userSession.getUserState());
                 }
 
+                @Override
                 protected boolean isRemoveDescendant(ItemData item) throws RepositoryException {
                   return item.getQPath().isDescendantOf(removedRoot.getQPath())
                       || item.getQPath().isDescendantOf(restorePath);
@@ -461,6 +463,7 @@
       // current C in the workspace will be left unchanged.
 
       int action = ntManager.findNodeDefinition(qname,
+                                                frozen.getPrimaryTypeName(),
                                                 currentNode().getPrimaryTypeName(),
                                                 currentNode().getMixinTypeNames())
                             .getOnParentVersion();
Index: component/core/src/main/java/org/exoplatform/services/jcr/impl/core/version/FrozenNodeInitializer.java
===================================================================
--- component/core/src/main/java/org/exoplatform/services/jcr/impl/core/version/FrozenNodeInitializer.java	(revision 68520)
+++ component/core/src/main/java/org/exoplatform/services/jcr/impl/core/version/FrozenNodeInitializer.java	(working copy)
@@ -195,6 +195,7 @@
 
     NodeData parent = (NodeData) dataManager.getItemData(node.getParentIdentifier());
     NodeDefinition pdef = ntManager.findNodeDefinition(qname,
+                                                       node.getPrimaryTypeName(),
                                                        parent.getPrimaryTypeName(),
                                                        parent.getMixinTypeNames());
     int action = pdef.getOnParentVersion();
Index: component/core/src/main/java/org/exoplatform/services/jcr/impl/core/nodetype/NodeTypeManagerImpl.java
===================================================================
--- component/core/src/main/java/org/exoplatform/services/jcr/impl/core/nodetype/NodeTypeManagerImpl.java	(revision 68520)
+++ component/core/src/main/java/org/exoplatform/services/jcr/impl/core/nodetype/NodeTypeManagerImpl.java	(working copy)
@@ -31,6 +31,7 @@
 import javax.jcr.RepositoryException;
 import javax.jcr.ValueFactory;
 import javax.jcr.nodetype.NoSuchNodeTypeException;
+import javax.jcr.nodetype.NodeDefinition;
 import javax.jcr.nodetype.NodeType;
 import javax.jcr.nodetype.NodeTypeIterator;
 import javax.jcr.nodetype.NodeTypeManager;
@@ -254,16 +255,92 @@
     return findPropertyDefinitions(propertyName, allTypes);
   }
 
+  /**
+   * Found node definition based on node name and node type. In case when
+   * suitable node definition not found first occurred residual definition will
+   * be returned.
+   * 
+   * @param nodeName the node name
+   * @param nodeType the node primary type
+   * @param parentTypes list of types where need to found node definition
+   * @return node definition
+   * @throws RepositoryException if definition not found
+   */
   public NodeDefinitionImpl findNodeDefinition(InternalQName nodeName,
+                                               InternalQName nodeTypeName,
+                                               List<ExtendedNodeType> parentTypes) throws RepositoryException {
+    NodeDefinitionImpl residualDef = null;
+    NodeDefinitionImpl lastResidualDef = null;
+    ExtendedNodeType nodeType = getNodeType(nodeTypeName);
+
+    for (ExtendedNodeType nt : parentTypes) {
+
+      outer: for (NodeDefinition nd : nt.getChildNodeDefinitions()) {
+        NodeDefinitionImpl nodeDef = (NodeDefinitionImpl) nd;
+        if (nodeDef.getQName().equals(nodeName)) {
+          return nodeDef;
+        } else if (nodeDef.isResidualSet()) {
+          // store last occurred residual definition to be able to return then
+          // (compatibility with previous implementation) 
+          lastResidualDef = nodeDef;
+
+          // check required primary types
+          for (NodeType requiredPrimaryType : nodeDef.getRequiredPrimaryTypes()) {
+            if (!nodeType.isNodeType(requiredPrimaryType.getName())) {
+              continue outer;
+            }
+          }
+
+          // for several suitable definitions returns the most older
+          if (residualDef == null
+              || nodeDef.getRequiredPrimaryTypes()[0].isNodeType(residualDef.getRequiredPrimaryTypes()[0].getName())) {
+            residualDef = nodeDef;
+          }
+        }
+      }
+    }
+
+    if (residualDef == null) {
+      residualDef = lastResidualDef;
+    }
+
+    if (residualDef == null)
+      throw new RepositoryException("Child node definition '" + nodeName.getAsString()
+          + "' is not found.");
+
+    return residualDef;
+  }
+
+  /**
+   * Found node definition based on node name and node type.
+   * 
+   * @param nodeName the node name
+   * @param nodeType the node primary type
+   * @param parentPrimaryType primary type where need to found node definition
+   * @param parentMixinTypes mixin types where need to found node definition
+   * @return node definition
+   * @throws RepositoryException if definition not found
+   */
+  public NodeDefinitionImpl findNodeDefinition(InternalQName nodeName,
+                                               InternalQName nodeType,
+                                               InternalQName parentPrimaryType,
+                                               InternalQName[] parentMixinTypes) throws RepositoryException {
+
+    List<ExtendedNodeType> parentTypes = getNodeTypes(parentPrimaryType, parentMixinTypes);
+    return findNodeDefinition(nodeName, nodeType, parentTypes);
+  }
+
+  public NodeDefinitionImpl findNodeDefinition(InternalQName nodeName,
                                                List<ExtendedNodeType> typesList) throws RepositoryException {
     NodeDefinitionImpl ndResidual = null;
     for (ExtendedNodeType nt : typesList) {
       NodeDefinitionImpl nd = (NodeDefinitionImpl) nt.getChildNodeDefinition(nodeName);
       if (nd != null) {
-        if (nd.isResidualSet())
+        if (nd.isResidualSet()) {
           ndResidual = nd;
-        else
+        } else {
           return nd;
+        }
       }
     }
 
